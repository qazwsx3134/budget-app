/******/

// webpackBootstrap

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// Load entry module and return exports

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

/************************************************************************/

/* 0 */

/***/

/* 1 */

/* harmony export (binding) */

/* 2 */

/* WEBPACK VAR INJECTION */

//! moment.js

// This is done to register the method called with moment()

// without creating circular dependencies.

// IE8 will treat undefined and null as object if it wasn't for

// input != null

// We need to deep clone this object.

// Plugins that add properties should also add the key here (null value),

// so we can properly clone ourselves.

// Moment prototype object

// Prevent infinite loop in case updateOffset creates new moment

// objects.

// -0 -> 0

// compare two arrays, return the number of differences

// Remove trailing comma and space

// Lenient ordinal parsing accepts just a number in addition to

// number + (possibly) stuff coming from _dayOfMonthOrdinalParse.

// TODO: Remove "ordinalParse" fallback in next major release.

// make sure changes to properties don't modify parent config

// token:    'M'

// padded:   ['MM', 2]

// ordinal:  'Mo'

// callback: function () { this.month() + 1 }

// format date using native date object

//       0 - 9

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript

// HELPERS

// HOOKS

// FORMATTING

// ALIASES

// PRIORITIES

// PARSING

// MOMENTS

// I know

// PRIORITY

// if we didn't find a month name, mark the date as invalid.

// LOCALES

// this is not used

// TODO: add sorting

// Sorting makes sure if one month (or abbr) is a prefix of another

// see sorting in computeMonthsParse

// make the regex if we don't have it already

// test the regex

// No op

// TODO: Another silent failure?

// Sorting makes sure if one month (or abbr) is a prefix of another it

// will match the longer piece.

// can't just apply() to create a date:

// https://stackoverflow.com/q/181348

// the date constructor remaps years 0-99 to 1900-1999

// preserve leap years using a full 400 year cycle, then reset

// the Date.UTC function remaps years 0-99 to 1900-1999

// start-of-first-week - start-of-year

// first-week day -- which january is always in the first week (4 for iso, 1 for other)

// first-week day local weekday -- which local weekday is fwd

// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday

// Sunday is the first day of the week.

// if we didn't get a weekday name, mark the date as invalid

// behaves the same as moment#day except

// as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)

// as a setter, sunday should belong to the previous week.

// Sorting makes sure if one weekday (or abbr) is a prefix of another it

// IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays

// Using charAt should be more compatible.

// Setting the hour should keep the time, because the user explicitly

// specified which hour they want. So trying to maintain the same hour (in

// a new timezone) makes sense. Adding/subtracting hours does not follow

// this rule.

// pick the locale from the array

// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each

// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root

//the next array item is better than a shallower substring of this one

// TODO: Find a better way to register and load all the locales in Node

// This function will load locale and then set the global locale.  If

// no arguments are passed in, it will simply return the current global

// locale key.

// moment.duration._locale = moment._locale = data;

//warn user if arguments are passed but the locale could not be set

// backwards compat for now: also set the locale

// make sure we set the locale AFTER all child locales have been

// created, so we won't end up with the child locale set.

// useful for testing

// MERGE

// pass null for config to unupdate, useful for tests

// returns locale data

//short-circuit everything else

// Pick the first defined of two or three arguments.

// hooks is actually the exported moment object

// convert an array to a date.

// the array should mirror the parameters below

// note: all values past the year are optional and will default to the lowest possible value.

// [year, month, day , hour, minute, second, millisecond]

//compute day of the year from weeks and weekdays

//if the day of the year is set, figure out what it is

// Default to current date.

// * if no year, month, day of month are given, default to today

// * if day of month is given, default month and year

// * if month is given, default only year

// * if year is given, don't default anything

// Zero out whatever was not defaulted, including time

// Check for 24:00:00.000

// Apply timezone offset from input. The actual utcOffset can be changed

// with parseZone.

// check for mismatching day of week

// TODO: We need to take the current isoWeekYear, but that depends on

// how we interpret now (local, utc, fixed offset). So create

// a now version of current config (take local/utc/offset flags, and

// create now).

// Default to current week.

// weekday -- low day numbers are considered next week

// local weekday -- counting starts from beginning of week

// default to beginning of week

// iso 8601 regex

// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)

// YYYYMM is NOT allowed by the standard

// date from iso format

// match[2] should be 'T' or space

// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3

// Remove comments and folding whitespace and replace multiple-spaces with a single space

// TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.

// the only allowed military tz is Z

// date and time from ref 2822 format

// date from iso format or fallback

// Final attempt, use Input Fallback

// date from string and format string

// TODO: Move this to another part of the creation flow to prevent circular deps

// This array is used to make a Date, either with `new Date` or `Date.UTC`

// console.log('token', token, 'parsedInput', parsedInput,

//         'regex', getParseRegexForToken(token, config));

// don't parse if it's not a known token

// add remaining unparsed input length to the string

// clear _12h flag if hour is <= 12

// handle meridiem

// nothing to do

// Fallback

// this is not supposed to happen

// date from string and array of format strings

// if there is any input that was not parsed add a penalty for that format

//or tokens

// Adding is smart enough around DST

// from milliseconds

// object construction must be done this way.

// https://github.com/moment/moment/issues/1423

// constant that refers to the ISO standard

// constant that refers to the RFC 2822 form

// Pick a moment m from moments so that m[fn](other) is true for all

// other. This relies on the function fn to be transitive.

//

// moments should either be an array of moment objects or an array, whose

// first element is an array of moment objects.

// TODO: Use [].sort instead?

// only allow non-integers for smallest unit

// representation for dateAddRemove

// 1000

// 1000 * 60

//using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978

// Because of dateAddRemove treats 24 hours as different from a

// day when working around DST, we need to store them separately

// It is impossible to translate months into days without knowing

// which months you are are talking about, so we have to store

// it separately.

// timezone chunker

// '+10:00' > ['10',  '00']

// '-1530'  > ['-15', '30']

// Return a moment from input, that is local/utc/zone equivalent to model.

// Use low-level api, because this fn is low-level api.

// On Firefox.24 Date#getTimezoneOffset returns a floating point.

// https://github.com/moment/moment/pull/1871

// This function will be called whenever a moment is mutated.

// It is intended to keep the offset in sync with the timezone.

// keepLocalTime = true means only change the timezone, without

// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->

// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset

// +0200, so we adjust the time as needed, to be valid.

// Keeping the time actually adds/subtracts (one hour)

// from the actual represented time. That is why we call updateOffset

// a second time. In case it wants us to change the offset again

// _changeInProgress == true case, then we have to adjust, because

// there is no such time in the given timezone.

// ASP.NET json date format regex

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html

// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere

// and further modified to allow for strings containing both week and day

// matching against regexp is expensive, do it on demand

// checks for null or undefined

// We'd normally use ~~inp for this, but unfortunately it also

// converts floats to ints.

// inp may be undefined, so careful calling replace on it.

// apply sign while we're at it

// TODO: remove 'name' arg after deprecation is removed

//invert the arguments, but complain about it

// We want to compare the start of today, vs this.

// Getting start-of-today depends on whether we're local/utc/offset or not.

// 1000 * 60 * 60

// 1000 * 60 * 60 * 24, negate dst

// 1000 * 60 * 60 * 24 * 7, negate dst

// difference in months

// b is in (anchor - 1 month, anchor + 1 month)

// linear across the month

//check for negative zero, return zero if negative zero

// native implementation is ~50x faster, use it when we can

/**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */

// If passed a locale key, it will set the locale for this

// instance.  Otherwise, it will return the locale configuration

// variables for this instance.

// actual modulo - handles negative numbers (for dates before 1970):

// Date.UTC remaps years 0-99 to 1900-1999

// new Date(NaN).toJSON() === null

// ()

// (5)

// (fmt, 5)

// (fmt)

// (true)

// (true, 5)

// (true, fmt, 5)

// (true, fmt)

// Side effect imports

// supports only 2.0-style add(1, 's') or add(duration)

// supports only 2.0-style subtract(1, 's') or subtract(duration)

// if we have a mix of positive and negative values, bubble down first

// check: https://github.com/moment/moment/issues/2166

// The following code bubbles up values, see the tests for

// examples of what that means.

// convert days to months

// 12 months -> 1 year

// 400 years have 146097 days (taking into account leap year rules)

// 400 years have 12 months === 4800

// the reverse of daysToMonths

// handle milliseconds separately because of floating point math errors (issue #1867)

// Math.floor prevents floating point math errors here

// TODO: Use this.as('ms')?

// a few seconds to seconds

// seconds to minute

// minutes to hour

// hours to day

// days to month

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize

// This function allows you to set the rounding function for relative time strings

// This function allows you to set a threshold for relative time strings

// for ISO strings we do not use the normal bubbling rules:

//  * milliseconds bubble up until they become hours

//  * days do not bubble at all

//  * months bubble up until they become years

// This is because there is no context-free conversion between hours and days

// (think of clock changes)

// and also not between days and months (28-31 days per month)

// 3600 seconds -> 60 minutes -> 1 hour

// inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js

// this is the same as C#'s (Noda) and python (isodate)...

// but not other JS (goog.date)

// currently HTML5 input type only supports 24-hour formats

// <input type="datetime-local" />

// <input type="datetime-local" step="1" />

// <input type="datetime-local" step="0.001" />

// <input type="date" />

// <input type="time" />

// <input type="time" step="1" />

// <input type="time" step="0.001" />

// <input type="week" />

/* 3 */

/* harmony import */

/* 4 */

/* harmony default export */

/* 5 */

// contains in native

// export native or passed

// bind timers to global for call from export context

// extend global

// export

// type bitmap

// forced

// global

// static

// proto

// bind

// wrap

// safe

// real proto method for `library`

/* 6 */

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

/*#__PURE__*/

// name and withTheme are invariant in the outer scope

// eslint-disable-next-line react-hooks/rules-of-hooks

// Provide the theme to the wrapped component.

// So we don't have to use the `withTheme()` Higher-order Component.

// The wrapper receives only user supplied props, which could be a subset of

// the actual props Component might receive due to merging with defaultProps.

// So copying it here would give us the same result in the wrapper as well.

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/withStyles.js

/* 7 */

// By explicitly using `prop-types` you are opting into new production behavior.

// http://fb.me/prop-types-in-prod

/* 8 */

// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.

// A strict capitalization should uppercase the first letter of each word a the sentence.

// We only handle the first word.

/* 9 */

/* 10 */

/* 11 */

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028

// eslint-disable-line no-undef

/* 12 */

/* 13 */

/* 14 */

/* 15 */

/* 16 */

/* unused harmony export hexToRgb */

/* unused harmony export rgbToHex */

/* unused harmony export hslToRgb */

/* unused harmony export decomposeColor */

/* unused harmony export recomposeColor */

/* eslint-disable no-use-before-define */

/**
 * Returns a number whose value is limited to the given range.
 *
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */

/**
 * Converts a color from CSS hex format to CSS rgb format.
 *
 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
 * @returns {string} A CSS rgb color string
 */

/**
 * Converts a color from hsl format to rgb format.
 *
 * @param {string} color - HSL color values
 * @returns {string} rgb color values
 */

/**
 * Returns an object with the type and values of a color.
 *
 * Note: Does not support rgb % values.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {object} - A MUI color object: {type: string, values: number[]}
 */

// Idempotent

/**
 * Converts a color object with type and values to a string.
 *
 * @param {object} color - Decomposed color
 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
 * @param {array} color.values - [n,n,n] or [n,n,n,n]
 * @returns {string} A CSS color string
 */

// Only convert the first 3 values to int (i.e. not alpha)

/**
 * Calculates the contrast ratio between two colors.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} A contrast ratio value in the range 0 - 21.
 */

/**
 * The relative brightness of any point in a color space,
 * normalized to 0 for darkest black and 1 for lightest white.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} The relative brightness of the color in the range 0 - 1
 */

// Truncate at 3 digits

// normalized

/**
 * Darken or lighten a color, depending on its luminance.
 * Light colors are darkened, dark colors are lightened.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

/**
 * Set the absolute transparency of a color.
 * Any existing alpha values are overwritten.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} value - value to set the alpha channel to in the range 0 -1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

/**
 * Darkens a color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

/**
 * Lightens a color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

/* unused harmony export getLuminance */

/* 17 */

/* 18 */

/* 19 */

// DCE check should happen before ReactDOM bundle executes so that

// DevTools can report bad minification during injection.

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

// Verify that the code above has been dead code eliminated (DCE'd).

// DevTools shouldn't crash React, no matter what.

// We should still report in case we break this code.

/* 20 */

/* 21 */

/* 22 */

/* 23 */

/* 24 */

/* 25 */

/* 26 */

// 7.1.15 ToLength

// pow(2, 53) - 1 == 9007199254740991

/* 27 */

/* 28 */

/* 29 */

// Thank's IE8 for his funny defineProperty

/* 30 */

/* empty */

/* 31 */

/* 32 */

// 7.1.13 ToObject(argument)

/* 33 */

/* 34 */

/* 35 */

/* 36 */

/* 37 */

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */

// Don't bother if no value provided

// Force an array if not already something iterable

/*eslint no-param-reassign:0*/

// Iterate over array values

// Iterate over object keys

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */

/* 38 */

/* 39 */

/* 40 */

/* 41 */

/* 42 */

// to indexed object, toObject with fallback for non-array-like ES3 strings

/* 43 */

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js

/* 44 */

/* 45 */

/* 46 */

/* 47 */

/* 48 */

// eslint-disable-next-line no-useless-call

/* 49 */

/* 50 */

// optional / simple context binding

/* 51 */

/* 52 */

// 7.1.4 ToInteger

/* 53 */

/* 54 */

// most Object methods by ES6 should accept primitives

/* 55 */

// 0 -> Array#forEach

// 1 -> Array#map

// 2 -> Array#filter

// 3 -> Array#some

// 4 -> Array#every

// 5 -> Array#find

// 6 -> Array#findIndex

// map

// some

// find

// findIndex

// filter

// every

/* 56 */

/* unused harmony export easing */

/* unused harmony export formatMs */

/* unused harmony export isString */

/* unused harmony export isNumber */

// This is the most common easing curve.

// Objects enter the screen at full velocity from off-screen and

// slowly decelerate to a resting point.

// Objects leave the screen at full velocity. They do not decelerate when off-screen.

// The sharp curve is used by objects that may return to the screen at any time.

// most basic recommended timing

// this is to be used in complex animations

// recommended when something is entering screen

// recommended when something is leaving screen

// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves

// to learn the context in which each easing should be used.

/**
 * @param {string|Array} props
 * @param {object} param
 * @param {string} param.prop
 * @param {number} param.duration
 * @param {string} param.easing
 * @param {number} param.delay
 */

// https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

/* 57 */

/* 58 */

/* 59 */

/* 60 */

// 7.2.1 RequireObjectCoercible(argument)

/* 61 */

// eslint-disable-next-line no-undef

/* , mapfn, thisArg */

/* , end */

/* , thisArg */

/* , start, end */

// eslint-disable-line no-unused-vars

/* , fromIndex */

/* , initialValue */

/* , offset */

/* noop */

// eslint-disable-next-line max-statements

// eslint-disable-line no-new

// `ws` module bug, temporarily remove validation length for Uint8Array

// https://github.com/websockets/ws/pull/645

/* 62 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

// don't hoist over string (html) components

// Avoid failures from read-only properties

/* 63 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

// we don't care about invariant's own frame

/* 64 */

/* 65 */

// 7.1.1 ToPrimitive(input [, PreferredType])

// instead of the ES6 spec version, we didn't implement @@toPrimitive case

// and the second argument - flag - preferred type is a string

/* 66 */

// object ID

// return primitive with prefix

// can't set metadata to uncaught frozen object

// not necessary to add metadata

// add missing metadata

/* 67 */

/* 68 */

/* 69 */

/* 70 */

/* 71 */

/* 72 */

/* 73 */

/* 74 */

// 19.1.2.14 / 15.2.3.14 Object.keys(O)

/* 75 */

/* 76 */

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])

// Thrash, waste and sodomy: IE GC bug

// eslint-disable-line no-script-url

// createDict = iframe.contentWindow.Object;

// html.removeChild(iframe);

// add "__proto__" for Object.getPrototypeOf polyfill

/* 77 */

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

/* 78 */

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)

/* 79 */

// 22.1.3.31 Array.prototype[@@unscopables]

/* 80 */

/* 81 */

/* 82 */

/* 83 */

/* 84 */

/* 85 */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

/* 90 */

/* 91 */

/* 92 */

/* 93 */

/* 94 */

/* 95 */

/* 96 */

/* 97 */

/* 98 */

/* 99 */

/* 100 */

/* 101 */

/* 102 */

/* 103 */

/* 104 */

/* 105 */

/* 106 */

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// eslint-disable-next-line no-prototype-builtins

/* 107 */

/* 108 */

// getting tag from 19.1.3.6 Object.prototype.toString()

/* 109 */

// 7.3.20 SpeciesConstructor(O, defaultConstructor)

/* 110 */

/* 111 */

/* 112 */

/* 113 */

/* 114 */

/* 115 */

// false -> Array#indexOf

// true  -> Array#includes

// Array#includes uses SameValueZero equality algorithm

// eslint-disable-next-line no-self-compare

// Array#indexOf ignores holes, Array#includes - not

/* 116 */

/* 117 */

// 7.2.2 IsArray(argument)

/* 118 */

// eslint-disable-next-line no-throw-literal

/* 119 */

// 21.2.5.3 get RegExp.prototype.flags

/* 120 */

// `RegExpExec` abstract operation

// https://tc39.github.io/ecma262/#sec-regexpexec

/* 121 */

// #replace needs built-in support for named groups.

// #match works fine because it just return the exec results, even if it has

// a "grops" property.

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec

// String methods call symbol-named RegEp methods

// Symbol-named RegExp methods call .exec

// RegExp[@@split] doesn't call the regex's exec method, but first creates

// a new one. We need to return the patched regex when creating the new one.

// 21.2.5.6 RegExp.prototype[@@match](string)

// 21.2.5.9 RegExp.prototype[@@search](string)

/* 122 */

// fast case for arrays with default iterator

/* 123 */

/* 124 */

// V8 ~ Chromium 42- fails only with 5+ elements

// early implementations not supports chaining

// weak collections should not contains .clear method

// create collection constructor

/* 125 */

/* 126 */

/* 127 */

/* 128 */

// We need to centralize the zIndex definitions as they work

// like global values in the browser.

/* 129 */

/* 130 */

/* 131 */

/* 132 */

/* 133 */

/* 134 */

/* 135 */

/* 136 */

/* 137 */

/* 138 */

/* 139 */

/* 140 */

/* 141 */

/* 142 */

/* 143 */

// IE 8- don't enum bug keys

/* 144 */

/* 145 */

// Works with __proto__ only. Old v8 can't work with null proto objects.

/* eslint-disable no-proto */

// eslint-disable-line

/* 146 */

/* 147 */

/* 148 */

/* 149 */

// 20.2.2.28 Math.sign(x)

/* 150 */

// 20.2.2.14 Math.expm1(x)

/* 151 */

// true  -> String#at

// false -> String#codePointAt

/* 152 */

// Fix native

// Set @@toStringTag to native iterators

// fix for some old engines

// fix Array#{values, @@iterator}.name in V8 / FF

// Define iterator

// Plug for library

/* 153 */

// helper for String#{startsWith, endsWith, includes}

/* 154 */

// 7.2.8 IsRegExp(argument)

/* 155 */

/* 156 */

// check on default Array iterator

/* 157 */

/* 158 */

/* 159 */

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

/* , start = 0, end = @length */

/* 160 */

// 22.1.3.4 Array.prototype.entries()

// 22.1.3.13 Array.prototype.keys()

// 22.1.3.29 Array.prototype.values()

// 22.1.3.30 Array.prototype[@@iterator]()

// target

// next index

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

/* 161 */

// Fix browsers whose `exec` methods don't consistently return `undefined`

// for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/

// eslint-disable-next-line no-loop-func

/* 162 */

// `AdvanceStringIndex` abstract operation

// https://tc39.github.io/ecma262/#sec-advancestringindex

/* 163 */

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:

// eslint-disable-next-line no-new-func

// Node.js 0.8-

/* 164 */

// IEEE754 conversions based on https://github.com/feross/ieee754

// iOS Safari 7.x bug

/* , littleEndian */

/* 165 */

/* 166 */

/* 167 */

/* 168 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 169 */

/* harmony reexport (safe) */

/* 170 */

/* global window */

/* 171 */

/* 172 */

/**
 * Expose `pathToRegexp`.
 */

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

// Match escaped characters that would otherwise appear in future matches.

// This allows the user to escape special characters that won't transform.

// Match Express-style parameters and un-named parameters with a prefix

// and optional suffixes. Matches appear as:

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

// Ignore already escaped sequences.

// Push the current path onto the tokens.

// Match any characters still remaining.

// If the path exists, push it onto the end.

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Prepend partial segment prefixes.

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/** @type {!Object} */

// Iterate over the tokens and create our regexp string.

// In non-strict mode we allow a slash at the end of match. If the path to

// match already ends with a slash, we remove it for consistency. The slash

// is valid at the end of a path match, not in the middle. This is important

// in non-ending mode, where "/test/" shouldn't match "/test//route".

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

// Use a negative lookahead to match only capturing groups.

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {!Array} */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {string} */

/* 173 */

/* 174 */

/* 175 */

/* 176 */

/* 177 */

/* 178 */

/* 179 */

/* 180 */

/* 181 */

/* 182 */

/* 183 */

/* 184 */

/* 185 */

// Don't enum bug & hidden keys

/* 186 */

/* 187 */

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

/* 188 */

// 19.1.2.1 Object.assign(target, source, ...)

// should work with symbols and should have deterministic property order (V8 bug)

/* 189 */

// 7.2.9 SameValue(x, y)

/* 190 */

/* , ...args */

/* 191 */

// fast apply, http://jsperf.lnkit.com/fast-apply/5

/* 192 */

/* 193 */

/* 194 */

/* 195 */

// 20.1.2.3 Number.isInteger(number)

/* 196 */

// 20.2.2.20 Math.log1p(x)

/* 197 */

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

/* 198 */

// call something on iterator step with safe closing on error

// 7.4.6 IteratorClose(iterator, completion)

/* 199 */

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)

/* 200 */

/* 201 */

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

/* = 0 */

/* = 0, end = @length */

/* 202 */

/* 203 */

/* 204 */

// 21.2.5.3 get RegExp.prototype.flags()

/* 205 */

// may throw

// variable length - can't use forEach

// unwrap

// correct subclassing with @@species support

// unhandled rejections tracking support, NodeJS Promise without it fails @@species test

// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

// constructor polyfill

// 25.4.3.1 Promise(executor)

// eslint-disable-next-line no-unused-vars

// <- awaiting reactions

// <- checked in isUnhandled reactions

// <- state

// <- done

// <- value

// <- rejection state, 0 - default, 1 - handled, 2 - unhandled

// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)

// 25.4.5.1 Promise.prototype.catch(onRejected)

// statics

// 25.4.4.5 Promise.reject(r)

// 25.4.4.6 Promise.resolve(x)

// 25.4.4.1 Promise.all(iterable)

// 25.4.4.4 Promise.race(iterable)

/* 206 */

// 25.4.1.5 NewPromiseCapability(C)

/* 207 */

/* 208 */

// fast case

// frozen object case

// collection type

// index

// first entry

// last entry

// size

// 23.1.3.1 Map.prototype.clear()

// 23.2.3.2 Set.prototype.clear()

// 23.1.3.3 Map.prototype.delete(key)

// 23.2.3.4 Set.prototype.delete(value)

// 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)

// 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)

/* , that = undefined */

// revert to the last existing entry

// 23.1.3.7 Map.prototype.has(key)

// 23.2.3.7 Set.prototype.has(value)

// change existing entry

// <- index

// <- key

// <- previous entry

// <- next entry

// add to index

// add .keys, .values, .entries, [@@iterator]

// 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11

// kind

// get next entry

// return step by kind

// or finish the iteration

// add [@@species], 23.1.2.2, 23.2.2.2

/* 209 */

// collection id

// leak store for uncaught frozen objects

// 23.3.3.2 WeakMap.prototype.delete(key)

// 23.4.3.3 WeakSet.prototype.delete(value)

// 23.3.3.4 WeakMap.prototype.has(key)

// 23.4.3.4 WeakSet.prototype.has(value)

/* 210 */

// https://tc39.github.io/ecma262/#sec-toindex

/* 211 */

// all object keys, includes non-enumerable and symbols

/* 212 */

// https://github.com/tc39/proposal-string-pad-start-end

/* 213 */

/* 214 */

/* 215 */

/* 216 */

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

// Detect buggy property enumeration order in older V8 versions.

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// eslint-disable-line no-new-wrappers

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// We don't expect any of the above to throw, but better to be safe.

/* 217 */

/* 218 */

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */

/* 219 */

/* 220 */

// Only Node.JS has a process variable that is of [[Class]] process

// For node use HTTP adapter

// For browsers use XHR adapter

/* Ignore */

/**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */

/* 221 */

// HTTP basic authentication

// Add xsrf header

// This is only done if running in a standard browser environment.

// Specifically not if we're in a web worker, or react-native.

// Set the request timeout in MS

// Listen for ready state

// The request errored out and we didn't get a response, this will be

// handled by onerror instead

// With one exception: request that using file: protocol, most browsers

// will return status as 0 even though it's a successful request

// Prepare the response

// Clean up request

// Handle browser request cancellation (as opposed to a manual cancellation)

// Handle low level network errors

// Real errors are hidden from us by the browser

// onerror should only fire if it's a network error

// Handle timeout

// Add headers to the request

// Add responseType to request if needed

// Remove Content-Type if data is undefined

// Otherwise add header to the request

// Add withCredentials to request if needed

// Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.

// But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.

// Handle progress if needed

// Not all browsers support upload events

// Handle cancellation

// Send the request

/* 222 */

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */

/* 223 */

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */

// eslint-disable-next-line no-param-reassign

/* 224 */

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

/* 225 */

/* unused harmony export styles */

/* Styles applied to the root element. */

/* Styles applied to the root element if `color="primary"`. */

/* Styles applied to the root element if `color="secondary"`. */

/* Styles applied to the root element if `color="action"`. */

/* Styles applied to the root element if `color="error"`. */

/* Styles applied to the root element if `color="disabled"`. */

/* Styles applied to the root element if `fontSize="inherit"`. */

/* Styles applied to the root element if `fontSize="small"`. */

/* Styles applied to the root element if `fontSize="large"`. */

/* 226 */

// Thanks to Joris Röling : https://github.com/jjupiter

// Maandag is die eerste dag van die week.

/* 227 */

// Saturday is the first day of the week.

/* 228 */

/* 229 */

/* 230 */

/* 231 */

/* 232 */

/* 233 */

// Monday is the first day of the week.

/* 234 */

// special case for zero

/* 235 */

/* 236 */

/* 237 */

/* 238 */

/* 239 */

/* 240 */

/* 241 */

/* 242 */

/* 243 */

// a few seconds / in a few seconds / a few seconds ago

// 9 seconds / in 9 seconds / 9 seconds ago

// a minute / in a minute / a minute ago

// 9 minutes / in 9 minutes / 9 minutes ago

// an hour / in an hour / an hour ago

// 9 hours / in 9 hours / 9 hours ago

// a day / in a day / a day ago

// 9 days / in 9 days / 9 days ago

// a month / in a month / a month ago

// 9 months / in 9 months / 9 months ago

// a year / in a year / a year ago

// 9 years / in 9 years / 9 years ago

// NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.

// Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.

/* 244 */

/* 245 */

// time formats are the same as en-gb

// traditional ordinal numbers above 31 are not commonly used in colloquial Welsh

// 1af to 10fed

// not 30ain, 70ain or 90ain

/* 246 */

/* 247 */

/* 248 */

/* 249 */

/* 250 */

/* 251 */

// if there is a day number before 'MMMM'

/* 252 */

/* 253 */

/* 254 */

/* 255 */

/* 256 */

/* 257 */

/* 258 */

/* 259 */

//ne 'diurno', ĉar estas uzita por proksimumo

/* 260 */

/* 261 */

/* 262 */

/* 263 */

/* 264 */

/* 265 */

/* 266 */

/* 267 */

/* 268 */

// TODO: Return 'e' when day of month > 1. Move this case inside

// block for masculine words below.

// See https://github.com/moment/moment/issues/3375

// Words with masculine grammatical gender: mois, trimestre, jour

// Words with feminine grammatical gender: semaine

/* 269 */

/* 270 */

/* 271 */

/* 272 */

/* 273 */

/* 274 */

/* 275 */

// the ordinal 'er' only applies to day of the month

/* 276 */

// Gujarati notation for meridiems are quite fuzzy in practice. While there exists

// a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.

/* 277 */

/* 278 */

// Hindi notation for meridiems are quite fuzzy in practice. While there exists

// a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.

/* 279 */

/* 280 */

/* 281 */

/* 282 */

/* 283 */

/* 284 */

/* 285 */

/* 286 */

/* 287 */

/* 288 */

/* 289 */

/* 290 */

/* 291 */

/* 292 */

/* 293 */

/* 294 */

/* 295 */

/**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */

// Negative Number --> always true

// Only 1 digit

// 2 digits

// 3 or 4 digits --> recursively check first digit

// Anything larger than 4 digits: recursively check first n-3 digits

// Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule

/* 296 */

/* 297 */

/* 298 */

/**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */

// E.g. "21 minūte", "3 minūtes".

// E.g. "21 minūtes" as in "pēc 21 minūtes".

// E.g. "3 minūtēm" as in "pēc 3 minūtēm".

/* 299 */

//Different grammatical cases

/* 300 */

/* 301 */

/* 302 */

/* 303 */

/* 304 */

/* 305 */

/* 306 */

/* 307 */

/* 308 */

/* 309 */

/* 310 */

/* 311 */

/* 312 */

/* 313 */

/* 314 */

// There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.

// Punjabi notation for meridiems are quite fuzzy in practice. While there exists

// a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.

/* 315 */

// Hack: if format empty we know this is used to generate

// RegExp by moment. Give then back both valid forms of months

// in RegExp ready format.

/* 316 */

// Saturday + Sunday

// Monday - Friday

/* 317 */

/* 318 */

/* 319 */

// http://new.gramota.ru/spravka/rules/139-prop : § 103

// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637

// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753

// по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?

// полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки

// копия предыдущего

// полные названия с падежами

// Выражение, которое соотвествует только сокращённым формам

/* 320 */

/* 321 */

/* 322 */

/*jshint -W100*/

/* 323 */

/* 324 */

/* 325 */

/* 326 */

/* 327 */

/* 328 */

/* 329 */

/* 330 */

/* 331 */

// refer http://ta.wikipedia.org/s/1er1

// வைகறை

// காலை

// நண்பகல்

// எற்பாடு

// மாலை

/* 332 */

/* 333 */

/* 334 */

/* 335 */

// yes, three characters difference

/* 336 */

/* 337 */

/* 338 */

/* 339 */

// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.

// This is currently too difficult (maybe even impossible) to add.

/* 340 */

/* 341 */

/* 342 */

// GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效

/* 343 */

// M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason

/* 344 */

/* 345 */

/* 346 */

/* 347 */

/* 348 */

/* 349 */

/* 350 */

// '中午'

/* 351 */

/* 352 */

/* 353 */

/* 354 */

// @flow

/* 355 */

/* 356 */

/* 357 */

/* 358 */

/* 359 */

/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */

// NOTE: 1 DOM access here

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */

// Return body, `getScroll` will take care to get the correct `scrollTop` from it

// Firefox want us to check `-x` and `-y` variations as well

/**
 * Returns the reference node of the reference object, or the reference object itself.
 * @method
 * @memberof Popper.Utils
 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
 * @returns {Element} parent
 */

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */

// Skip hidden elements which don't have an offsetParent

// .offsetParent will return the closest TH, TD or TABLE in case

// no offsetParent is present, I hate this job...

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */

// This check is needed to avoid errors in case one of the elements isn't defined for any reason

// Here we make sure to give as "start" the element that comes first in the DOM

// Both nodes are inside #document

// one of the nodes is inside shadowDOM, find which one

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */

// IE10 10 FIX: Please, don't ask, the element isn't

// considered in DOM in some circumstances...

// This isn't reproducible in IE10 compatibility mode of IE11

// subtract scrollbar size from sizes

// if an hypothetical scrollbar is detected, we must be sure it's not a `border`

// we make this check conditional for performance reasons

// In cases where the parent is fixed, we must ignore negative scroll in offset calc

// Subtract margins of documentElement in case it's being used as parent

// we do this only on HTML because it's the only element that behaves

// differently when margins are applied to it. The margins are included in

// the box of the documentElement, in the other cases not.

// Attach marginTop and marginLeft because in some circumstances we may need them

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */

// Handle viewport case

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */

// Handle other cases based on DOM element used as boundaries

// In case of HTML, we need a different computation

// for all the other DOM elements, this one is good

// Add paddings

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */

// Get popper node sizes

// Add position, width and height to our offsets object

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

// use native find if supported

// use `filter` to obtain the same behavior of `find`

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */

// use native findIndex if supported

// use `find` + `indexOf` if `findIndex` isn't supported

// eslint-disable-line dot-notation

// Add properties to offsets to make them a complete clientRect object

// we do this before each modifier to make sure the previous one doesn't

// mess with these values

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

// Resize event listener on window

// Scroll event listener on scroll parents

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

// Remove resize event listener on window

// Remove scroll event listener on scroll parents

// Reset state

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

// add unit if the value is numeric and is one of the following

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */

// Get rid of `auto` `auto-start` and `auto-end`

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */

// Use height if placement is left or right and index is 0 otherwise use width

// in this way the first offset will use an axis and the second one

// will use the other one

// If divider is found, we divide the list of values and operands to divide

// them by ofset X and Y.

// Convert the values with units to absolute pixels to allow our computations

// Loop trough the offsets arrays and execute the operations

// Most of the units rely on the orientation of the popper

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */

// separate value from unit

// If it's not a number it's an operator, I guess

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */

/**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */

/**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */

/**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */

/**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */

/**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */

/**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */

/**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */

/**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=100 - Index used to define the order of execution */

/** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */

/** @prop {ModifierFn} */

// if shift shiftvariation is specified, run the modifier

/**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=200 - Index used to define the order of execution */

/** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */

/**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=300 - Index used to define the order of execution */

// If offsetParent is the reference element, we really want to

// go one step up and use the next offsetParent as reference to

// avoid to make this modifier completely useless and look like broken

// NOTE: DOM access here

// resets the popper's position so that the document size can be calculated excluding

// the size of the popper element itself

// restores the original style properties after the offsets have been computed

/**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */

/**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */

/**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */

/**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=400 - Index used to define the order of execution */

/**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=500 - Index used to define the order of execution */

// arrow depends on keepTogether in order to work

// if arrowElement is a string, suppose it's a CSS selector

// if arrowElement is not found, don't run the modifier

// if the arrowElement isn't a query selector we must check that the

// provided DOM node is child of its popper node

// extends keepTogether behavior making sure the popper and its

// reference have enough pixels in conjunction

// top/left side

// bottom/right side

// compute center of the popper

// Compute the sideValue using the updated popper offsets

// take popper margin in account because we don't have this info available

// prevent arrowElement from being placed not contiguously to its popper

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */

/** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */

/**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=600 - Index used to define the order of execution */

// if `inner` modifier is enabled, we can't use the `flip` modifier

// seems like flip is trying to loop, probably there's not enough space on any of the flippable sides

// this boolean to detect any flip loop

// this object contains `position`, we want to preserve it along with

// any additional property we may add in the future

/**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */

/**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */

/**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */

/**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */

/**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */

/**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=700 - Index used to define the order of execution */

/** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */

/**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=800 - Index used to define the order of execution */

// Avoid unnecessary DOM access if visibility hasn't changed

/**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=850 - Index used to define the order of execution */

// when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)

// and not the bottom of the html element

// othwerise, we use the standard `top`, `left`, `bottom` and `right` properties

// Attributes

// Update `data` attributes, styles and arrowStyles

/**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

/**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */

/**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */

/**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=900 - Index used to define the order of execution */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */

// any property present in `data.styles` will be applied to the popper,

// in this way we can make the 3rd party modifiers add custom styles to it

// Be aware, modifiers could override the properties defined in the previous

// lines of this modifier!

// any property present in `data.attributes` will be applied to the popper,

// they will be set as HTML attributes of the element

// if arrowElement is defined and arrowStyles has some properties

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */

/** @prop {Function} */

// compute reference element offsets

// compute auto placement, store placement inside the data object,

// modifiers will be able to edit `placement` if needed

// and refer to originalPlacement to know the original value

// Apply `position` to popper before anything else because

// without the position applied we can't guarantee correct computations

/**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

// We can't use class properties because they don't get listed in the

// class prototype and break stuff like Sinon stubs

// if popper is destroyed, don't perform any further update

// store the computed placement inside `originalPlacement`

// compute the popper offsets

// run the modifiers

// the first `update` will call `onCreate` callback

// the other ones will call `onUpdate` callback

// touch DOM only if `applyStyle` modifier is enabled

// remove the popper if user explicitly asked for the deletion on destroy

// do not use `remove` because IE11 doesn't support it

/**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */

/**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */

/**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */

// make update() debounced, so that it only runs at most once-per-tick

// with {} we create a new object with the options inside it

// init state

// get reference and popper elements (allow jQuery wrappers)

// Deep merge modifiers options

// Refactoring modifiers' list (Object => Array)

// modifiers have the ability to execute arbitrary code when Popper.js get inited

// such code is executed in the same order of its modifier

// they could add new properties to their options configuration

// BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!

// fire the first update to position the popper in the right place

// setup event listeners, they will take care of update the position in specific situations

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */

/* 360 */

/* 361 */

/* 362 */

/* 363 */

/* 364 */

/* 365 */

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js

// Keep in mind that @media is inclusive by the CSS specification.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/createMixins.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/colors/common.js

// The colors used to style the text.

// The most important text.

// Secondary text.

// Disabled text have even lower visual prominence.

// Text hints.

// The color used to divide different elements.

// The background colors used to style the surfaces.

// Consistency between these values is important.

// The colors used to style the action elements.

// The color of an active action like an icon button.

// The color of an hovered action.

// The color of a selected action.

// The color of a disabled action.

// The background color of a disabled action.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/createTypography.js

/**
 * @see @link{https://material.io/design/typography/the-type-system.html}
 * @see @link{https://material.io/design/typography/understanding-typography.html}
 */

// Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/

// TODO To remove in v5?

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/shadows.js

// Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss

// Already transformed.

// All components align to an 8dp square baseline grid for mobile, tablet, and desktop.

// https://material.io/design/layout/understanding-layout.html#pixel-density

// Backward compatibility, to remove in v5.

// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/styles/transitions.js

// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/styles/zIndex.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/createMuiTheme.js

// Use the same logic as

// Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59

// and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54

// A collection of common colors.

// The palette type, can be light or dark.

// The colors used to represent primary interface elements for a user.

// The colors used to represent secondary interface elements for a user.

// The colors used to represent interface elements that the user should be made aware of.

// The grey colors.

// Used by `getContrastText()` to maximize the contrast between the background and

// the text.

// Take a background color and return the color of the text to maximize the contrast.

// Generate a rich color object.

// Used by the functions below to shift a color's luminance by approximately

// two indexes within its tonal palette.

// E.g., shift from Red 500 to Red 300 or Red 700.

// To deprecate in v4.1

//       warning(

//         false,

//         [

//           'Material-UI: theme.mixins.gutters() is deprecated.',

//           'You can use the source of the mixin directly:',

//           `

// paddingLeft: theme.spacing(2),

// paddingRight: theme.spacing(2),

// [theme.breakpoints.up('sm')]: {

//   paddingLeft: theme.spacing(3),

//   paddingRight: theme.spacing(3),

// },

// `,

//         ].join('\n'),

//       );

// Inject custom styles

// Provide default props

/* 366 */

/* 367 */

/* 368 */

/* 369 */

/* 370 */

/* 371 */

/* 372 */

/* 373 */

/* 374 */

/* 375 */

/* 376 */

/* 377 */

/* 378 */

/* 379 */

/* 380 */

/* 381 */

/* 382 */

/* 383 */

/* 384 */

/* 385 */

// ECMAScript 6 symbols shim

// 19.4.1.1 Symbol([description])

// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14

// 19.4.2.1 Symbol.for(key)

// 19.4.2.5 Symbol.keyFor(sym)

// 19.1.2.2 Object.create(O [, Properties])

// 19.1.2.4 Object.defineProperty(O, P, Attributes)

// 19.1.2.3 Object.defineProperties(O, Properties)

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

// 19.1.2.7 Object.getOwnPropertyNames(O)

// 19.1.2.8 Object.getOwnPropertySymbols(O)

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives

// https://bugs.chromium.org/p/v8/issues/detail?id=3443

// 24.3.2 JSON.stringify(value [, replacer [, space]])

// MS Edge converts symbol values to JSON as {}

// WebKit converts symbol values to JSON as null

// V8 throws on boxed symbols

// IE8 returns string on undefined

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

// 19.4.3.5 Symbol.prototype[@@toStringTag]

// 20.2.1.9 Math[@@toStringTag]

// 24.3.3 JSON[@@toStringTag]

/* 386 */

/* 387 */

// all enumerable object keys, includes symbols

/* 388 */

/* 389 */

// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)

/* 390 */

// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)

/* 391 */

/* 392 */

// 19.1.2.9 Object.getPrototypeOf(O)

/* 393 */

// 19.1.2.14 Object.keys(O)

/* 394 */

/* 395 */

// 19.1.2.5 Object.freeze(O)

/* 396 */

// 19.1.2.17 Object.seal(O)

/* 397 */

// 19.1.2.15 Object.preventExtensions(O)

/* 398 */

// 19.1.2.12 Object.isFrozen(O)

/* 399 */

// 19.1.2.13 Object.isSealed(O)

/* 400 */

// 19.1.2.11 Object.isExtensible(O)

/* 401 */

// 19.1.3.1 Object.assign(target, source)

/* 402 */

// 19.1.3.10 Object.is(value1, value2)

/* 403 */

// 19.1.3.19 Object.setPrototypeOf(O, proto)

/* 404 */

// 19.1.3.6 Object.prototype.toString()

/* 405 */

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)

/* 406 */

// 19.2.4.2 name

/* 407 */

// 19.2.3.6 Function.prototype[@@hasInstance](V)

// for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

/* 408 */

// 18.2.5 parseInt(string, radix)

/* 409 */

// 18.2.4 parseFloat(string)

/* 410 */

// Number('+0x1') should be NaN, old V8 fix

// fast equal /^0b[01]+$/i

// fast equal /^0o[0-7]+$/i

// parseInt parses a string to a first unavailable symbol

// but ToNumber should return NaN if a string contains unavailable symbols

// ES3:

/* 411 */

// V8 ~ Android 4.3-

/* 412 */

// IE7-

/* 413 */

// 20.1.2.1 Number.EPSILON

/* 414 */

// 20.1.2.2 Number.isFinite(number)

/* 415 */

/* 416 */

// 20.1.2.4 Number.isNaN(number)

/* 417 */

// 20.1.2.5 Number.isSafeInteger(number)

/* 418 */

// 20.1.2.6 Number.MAX_SAFE_INTEGER

/* 419 */

// 20.1.2.10 Number.MIN_SAFE_INTEGER

/* 420 */

// 20.1.2.12 Number.parseFloat(string)

/* 421 */

// 20.1.2.13 Number.parseInt(string, radix)

/* 422 */

// 20.2.2.3 Math.acosh(x)

/* 423 */

// 20.2.2.5 Math.asinh(x)

// Tor Browser bug: Math.asinh(0) -> -0

/* 424 */

// 20.2.2.7 Math.atanh(x)

// Tor Browser bug: Math.atanh(-0) -> 0

/* 425 */

// 20.2.2.9 Math.cbrt(x)

/* 426 */

// 20.2.2.11 Math.clz32(x)

/* 427 */

// 20.2.2.12 Math.cosh(x)

/* 428 */

/* 429 */

// 20.2.2.16 Math.fround(x)

/* 430 */

/* 431 */

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

/* 432 */

// 20.2.2.18 Math.imul(x, y)

// some WebKit versions fails with big numbers, some has wrong arity

/* 433 */

// 20.2.2.21 Math.log10(x)

/* 434 */

/* 435 */

// 20.2.2.22 Math.log2(x)

/* 436 */

/* 437 */

// 20.2.2.30 Math.sinh(x)

// V8 near Chromium 38 has a problem with very small numbers

/* 438 */

// 20.2.2.33 Math.tanh(x)

/* 439 */

// 20.2.2.34 Math.trunc(x)

/* 440 */

// length should be 1, old FF problem

// 21.1.2.2 String.fromCodePoint(...codePoints)

/* 441 */

// 21.1.2.4 String.raw(callSite, ...substitutions)

/* 442 */

// 21.1.3.25 String.prototype.trim()

/* 443 */

// 21.1.3.27 String.prototype[@@iterator]()

/* 444 */

// 21.1.3.3 String.prototype.codePointAt(pos)

/* 445 */

// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

/* , endPosition = @length */

/* 446 */

// 21.1.3.7 String.prototype.includes(searchString, position = 0)

/* , position = 0 */

/* 447 */

// 21.1.3.13 String.prototype.repeat(count)

/* 448 */

// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

/* 449 */

// B.2.3.2 String.prototype.anchor(name)

/* 450 */

// B.2.3.3 String.prototype.big()

/* 451 */

// B.2.3.4 String.prototype.blink()

/* 452 */

// B.2.3.5 String.prototype.bold()

/* 453 */

// B.2.3.6 String.prototype.fixed()

/* 454 */

// B.2.3.7 String.prototype.fontcolor(color)

/* 455 */

// B.2.3.8 String.prototype.fontsize(size)

/* 456 */

// B.2.3.9 String.prototype.italics()

/* 457 */

// B.2.3.10 String.prototype.link(url)

/* 458 */

// B.2.3.11 String.prototype.small()

/* 459 */

// B.2.3.12 String.prototype.strike()

/* 460 */

// B.2.3.13 String.prototype.sub()

/* 461 */

// B.2.3.14 String.prototype.sup()

/* 462 */

// 20.3.3.1 / 15.9.4.4 Date.now()

/* 463 */

/* 464 */

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

// PhantomJS / old WebKit has a broken implementations

/* 465 */

/* 466 */

/* 467 */

/* 468 */

/* 469 */

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)

/* 470 */

// 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)

/* , mapfn = undefined, thisArg = undefined */

// if object isn't iterable or it's array with default iterator - use simple case

/* 471 */

// WebKit Array.of isn't generic

// 22.1.2.3 Array.of( ...items)

/* 472 */

// 22.1.3.13 Array.prototype.join(separator)

// fallback for not array-like strings

/* 473 */

// fallback for not array-like ES3 strings and DOM objects

/* 474 */

// IE8-

// V8 bug

// Old WebKit

// 22.1.3.25 Array.prototype.sort(comparefn)

/* 475 */

// 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])

/* 476 */

// cross-realm fallback

/* 477 */

// 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])

/* 478 */

// 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])

/* 479 */

// 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])

/* 480 */

// 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])

/* 481 */

// 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])

/* 482 */

// 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])

/* 483 */

// 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])

/* , fromIndex = 0 */

/* 484 */

// 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])

/* , fromIndex = @[*-1] */

// convert -0 to +0

/* 485 */

/* 486 */

/* 487 */

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

// Shouldn't skip holes

/* 488 */

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

/* 489 */

/* 490 */

// RegExp constructor can alter flags and IsRegExp works correct with @@match

/* 491 */

// 21.2.5.14 RegExp.prototype.toString()

/* 492 */

// @@match logic

// `String.prototype.match` method

// https://tc39.github.io/ecma262/#sec-string.prototype.match

// `RegExp.prototype[@@match]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match

/* 493 */

// @@replace logic

// `String.prototype.replace` method

// https://tc39.github.io/ecma262/#sec-string.prototype.replace

// `RegExp.prototype[@@replace]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace

// NOTE: This is equivalent to

//   captures = result.slice(1).map(maybeToString)

// but for some reason `nativeSlice.call(result, 1, result.length)` (called in

// the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and

// causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

// https://tc39.github.io/ecma262/#sec-getsubstitution

// \d\d?

/* 494 */

// @@search logic

// `String.prototype.search` method

// https://tc39.github.io/ecma262/#sec-string.prototype.search

// `RegExp.prototype[@@search]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search

/* 495 */

// @@split logic

// based on es5-shim implementation, need to rework it

// If `separator` is not a regex, use native split

// Avoid an infinite loop

// `String.prototype.split` method

// https://tc39.github.io/ecma262/#sec-string.prototype.split

// `RegExp.prototype[@@split]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split

// NOTE: This cannot be properly polyfilled in engines that don't support

// the 'y' flag.

/* 496 */

// Node.js

// browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

// Promise.resolve without an argument throws an error in LG WebOS 2

// strange IE + webpack dev server bug - use .call(global)

/* 497 */

/* 498 */

// 23.1 Map Objects

// 23.1.3.6 Map.prototype.get(key)

// 23.1.3.9 Map.prototype.set(key, value)

/* 499 */

// 23.2 Set Objects

// 23.2.3.1 Set.prototype.add(value)

/* 500 */

// 23.3.3.3 WeakMap.prototype.get(key)

// 23.3.3.5 WeakMap.prototype.set(key, value)

// IE11 WeakMap frozen keys fix

// store frozen objects on internal weakmap shim

// store all the rest on native weakmap

/* 501 */

// 23.4 WeakSet Objects

// 23.4.3.1 WeakSet.prototype.add(value)

/* 502 */

// 24.1.3.1 ArrayBuffer.isView(arg)

// 24.1.4.3 ArrayBuffer.prototype.slice(start, end)

// FF fix

/* 503 */

/* 504 */

/* 505 */

/* 506 */

/* 507 */

/* 508 */

/* 509 */

/* 510 */

/* 511 */

/* 512 */

/* 513 */

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)

// MS Edge argumentsList argument is optional

/* 514 */

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])

/* , newTarget */

// w/o altered newTarget, optimization for 0-4 arguments

// w/o altered newTarget, lot of arguments case

// with altered newTarget, not support built-in constructors

/* 515 */

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false

/* 516 */

// 26.1.4 Reflect.deleteProperty(target, propertyKey)

/* 517 */

// 26.1.5 Reflect.enumerate(target)

// keys

/* 518 */

// 26.1.6 Reflect.get(target, propertyKey [, receiver])

/* , receiver */

/* 519 */

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)

/* 520 */

// 26.1.8 Reflect.getPrototypeOf(target)

/* 521 */

// 26.1.9 Reflect.has(target, propertyKey)

/* 522 */

// 26.1.10 Reflect.isExtensible(target)

/* 523 */

// 26.1.11 Reflect.ownKeys(target)

/* 524 */

// 26.1.12 Reflect.preventExtensions(target)

/* 525 */

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])

/* 526 */

// 26.1.14 Reflect.setPrototypeOf(target, proto)

/* 527 */

/* 528 */

// https://github.com/tc39/Array.prototype.includes

/* 529 */

/* 530 */

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

/* 531 */

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

/* 532 */

/* 533 */

/* , fillString = ' ' */

/* 534 */

/* 535 */

/* 536 */

/* 537 */

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

/* 538 */

/* 539 */

/* 540 */

/* 541 */

/* 542 */

/* 543 */

// https://github.com/tc39/proposal-object-getownpropertydescriptors

/* 544 */

/* 545 */

// https://github.com/tc39/proposal-object-values-entries

/* 546 */

/* 547 */

/* 548 */

/* 549 */

// https://github.com/tc39/proposal-promise-finally

/* 550 */

/* 551 */

// ie9- setTimeout & setInterval additional parameters fix

/* 552 */

/* 553 */

// TODO: Not spec compliant, should be false.

/* 554 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// The ._invoke method unifies the implementations of the .next,

// .throw, and .return methods.

// Be forgiving, per 25.3.3.3.3 of the spec:

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// Setting context._sent for legacy support of Babel's

// function.sent implementation.

// If an exception is thrown from innerFn, we leave state ===

// GenStateExecuting and loop back for another invocation.

// Dispatch the exception by looping back around to the

// context.dispatchException(context.arg) call above.

// Call delegate.iterator[context.method](context.arg) and handle the

// result, either by returning a { value, done } result from the

// delegate iterator, or by modifying context.method and context.arg,

// setting context.delegate to null, and returning the ContinueSentinel.

// Try/catch helper to minimize deoptimizations. Returns a completion

// record like context.tryEntries[i].completion. This interface could

// have been (and was previously) designed to take a closure to be

// invoked without arguments, but in all the cases we care about we

// already have an existing method we want to call, so there's no need

// to create a new function object. We can even get away with assuming

// the method takes exactly one argument, since that happens to be true

// in every case, so we don't have to touch the arguments object. The

// only additional allocation required is the completion record, which

// has a stable shape and so hopefully should be cheap to allocate.

// Dummy constructor functions that we use as the .constructor and

// .constructor.prototype properties for functions that return Generator

// objects. For full spec compliance, you may wish to configure your

// minifier not to mangle the names of these two functions.

// This is a polyfill for %IteratorPrototype% for environments that

// don't natively support it.

// This environment has a native %IteratorPrototype%; use it instead

// of the polyfill.

// Helper for defining the .next, .throw, and .return methods of the

// Iterator interface in terms of a single ._invoke method.

// Define the unified helper method that is used to implement .next,

// .throw, and .return (see defineIteratorMethods).

// When a yielded Promise is resolved, its final value becomes

// the .value of the Promise<{value,done}> result for the

// current iteration.

// If a rejected Promise was yielded, throw the rejection back

// into the async generator function so it can be handled there.

// If enqueue has been called before, then we want to wait until

// all previous Promises have been resolved before calling invoke,

// so that results are always delivered in the correct order. If

// enqueue has not been called before, then it is important to

// call invoke immediately, without waiting on a callback to fire,

// so that the async generator function has the opportunity to do

// any necessary setup in a predictable way. This predictability

// is why the Promise constructor synchronously invokes its

// executor callback, and why async functions synchronously

// execute code before the first await. Since we implement simple

// async functions in terms of async generators, it is especially

// important to get this right, even though it requires care.

// Avoid propagating failures to Promises returned by later

// invocations of the iterator.

// A .throw or .return when the delegate iterator has no .throw

// method always terminates the yield* loop.

// Note: ["return"] must be used for ES3 parsing compatibility.

// If the delegate iterator has a return method, give it a

// chance to clean up.

// If maybeInvokeDelegate(context) changed context.method from

// "return" to "throw", let that override the TypeError below.

// Assign the result of the finished delegate to the temporary

// variable specified by delegate.resultName (see delegateYield).

// Resume execution at the desired location (see delegateYield).

// If context.method was "throw" but the delegate handled the

// exception, let the outer generator proceed normally. If

// context.method was "next", forget context.arg since it has been

// "consumed" by the delegate iterator. If context.method was

// "return", allow the original .return call to continue in the

// outer generator.

// The delegate iterator is finished, so forget it and continue with

// the outer generator.

// Define Generator.prototype.{next,throw,return} in terms of the

// unified ._invoke helper method.

// The root entry object (effectively a try statement without a catch

// or a finally block) gives us a place to store values thrown from

// locations where there is no enclosing try statement.

// Return an iterator with no values.

// Regardless of whether this script is executing as a CommonJS module

// or not, return the runtime object so that we can declare the variable

// regeneratorRuntime in the outer scope, which allows this module to be

// injected easily by `bin/regenerator --include-runtime script.js`.

// For the native GeneratorFunction constructor, the best we can

// do is to check its .name property.

// Within the body of any async function, `await x` is transformed to

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// meant to be awaited.

// Note that simple async functions are implemented on top of

// AsyncIterator objects; they just return a Promise for the value of

// the final result produced by the iterator.

// A Generator should always return itself as the iterator object when the

// @@iterator function is called on it. Some browsers' implementations of the

// iterator prototype chain incorrectly implement this, causing the Generator

// object to not be returned from this call. This ensures that doesn't happen.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// Rather than returning an object with a next method, we keep

// things simple and return the next function itself.

// To avoid creating an additional object, we just hang the .value

// and .done properties off the next function object itself. This

// also ensures that the minifier will not anonymize the function.

// Resetting context._sent for legacy support of Babel's

// Not sure about the optimal order of these conditions:

// If the dispatched exception was caught by a catch block,

// then let that catch block handle the exception normally.

// Exception thrown outside of any try block that could handle

// it, so set the completion value of the entire function to

// throw the exception.

// Ignore the finally entry if control is not jumping to a

// location outside the try/catch block.

// The context.catch method must only be called with a location

// argument that corresponds to a known catch block.

// Deliberately forget the last sent value so that we don't

// accidentally pass it on to the delegate.

// This module should not be running in strict mode, so the above

// assignment should always work unless something is misconfigured. Just

// in case runtime.js accidentally runs in strict mode, we can escape

// strict mode using a global Function call. This could conceivably fail

// if a Content Security Policy forbids using Function, but in that case

// the proper solution is to fix the accidental strict mode problem. If

// you've misconfigured your bundler to force strict mode and applied a

// CSP to forbid Function, and you're not willing to fix either of those

// problems, please detail your unique predicament in a GitHub issue.

/* 555 */

/* 556 */

// https://github.com/tc39/proposal-global

/* 557 */

// prevent global pollution for namespaces

// make static versions for prototype methods

// export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

// export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

/* 558 */

/* 559 */

/* 560 */

/* 561 */

/* 562 */

/* 563 */

/* 564 */

/* 565 */

/* 566 */

/* 567 */

/* 568 */

/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 569 */

/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/* 570 */

/* 571 */

/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 572 */

// Important!

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

/* 573 */

/* 574 */

/** @license React v16.12.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 575 */

// module.parent = undefined by default

/* 576 */

/* 577 */

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */

// Copy axios.prototype to instance

// Copy context to instance

// Create the default instance to be exported

// Expose Axios class to allow class inheritance

// Factory for creating new instances

// Expose Cancel & CancelToken

// Expose all/spread

// Allow use of default import syntax in TypeScript

/* 578 */

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

/* 579 */

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */

// Allow for axios('example/url'[, config]) a la fetch API

// Hook up interceptors middleware

// Provide aliases for supported request methods

/*eslint func-names:0*/

/* 580 */

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */

/* 581 */

/**
 * Throws a `Cancel` if cancellation has been requested.
 */

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */

// Support baseURL config

// Ensure headers exist

// Transform request data

// Flatten headers

// Transform response data

/* 582 */

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */

/* 583 */

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/* 584 */

/* 585 */

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */

/* 586 */

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

// Standard

// Microsoft

// Mozilla

// Axios

/* 587 */

// Headers whose duplicates are ignored by node

// c.f. https://nodejs.org/api/http.html#http_message_headers

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

/* 588 */

/**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */

// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

// IE needs attribute set twice to normalize properties

// Standard browser envs have full support of the APIs needed to test

// whether the request URL is of the same origin as current location.

/* 589 */

/* 590 */

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

// A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).

// RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed

// by any combination of letters, digits, plus, period, or hyphen.

/* 591 */

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

/* 592 */

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */

/* 593 */

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

/* 594 */

/* 595 */

/* 596 */

/* 597 */

/* 598 */

/* 599 */

// EXTERNAL MODULE: ./node_modules/react/index.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/batch.js

// Default to a dummy "batch" implementation that just runs the callback

// Allow injecting another batching function later

// the current/next pattern is copied from redux's createStore code.

// TODO: refactor+expose that code to be reusable here?

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js

/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
      export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
    Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
    Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/

// options object:

// If we aren't running in "pure" mode, we don't want to memoize values.

// To avoid conditionally calling hooks, we fall back to a tiny wrapper

// that just executes the given callback immediately.

// Distinguish between actual "data" props that were passed to the wrapper component,

// and values needed to control behavior (forwarded refs, alternate context instances).

// To maintain the wrapperProps object reference, memoize this destructuring.

// Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.

// Memoize the check that determines which context instance we should use.

// Based on the previous check, one of these must be true

// The child props selector needs the store reference as an input.

// Re-create this selector whenever the store changes.

// This Subscription's source should match where store came from: props vs. context. A component

// connected to the store via props shouldn't use subscription from context, or vice versa.

// `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in

// the middle of the notification loop, where `subscription` will then be null. This can

// probably be avoided if Subscription's listeners logic is changed to not call listeners

// that have been unsubscribed in the  middle of the notification loop.

// Otherwise, put this component's subscription instance into context, so that

// connected descendants won't update until after this component is done

// Propagate any mapState/mapDispatch errors upwards

// Set up refs to coordinate values between the subscription effect and the render logic

// Tricky logic here:

// - This render may have been triggered by a Redux store update that produced new child props

// - However, we may have gotten new wrapper props after that

// If we have new child props, and the same wrapper props, we know we should use the new child props as-is.

// But, if we have new wrapper props, those might change the child props, so we have to recalculate things.

// So, we'll use the child props from store update only if the wrapper props are the same as last time.

// TODO We're reading the store directly in render() here. Bad idea?

// This will likely cause Bad Things (TM) to happen in Concurrent Mode.

// Note that we do this because on renders _not_ caused by store updates, we need the latest store state

// to determine what the child props should be.

// We need this to execute synchronously every time we re-render. However, React warns

// about useLayoutEffect in SSR, so we try to detect environment and fall back to

// just useEffect instead to avoid the warning, since neither will run anyway.

// We want to capture the wrapper props and child props we used for later comparisons

// If the render was from a store update, clear out that reference and cascade the subscriber update

// Our re-subscribe logic only runs when the store/subscription setup changes

// If we're not subscribed to the store, nothing to do here

// Capture values for checking if and when this component unmounts

// Actually run the selector with the most recent store state and wrapper props

// to determine what the child props should be

// If the child props haven't changed, nothing to do here - cascade the subscription update

// Save references to the new child props.  Note that we track the "child props from store update"

// as a ref instead of a useState/useReducer because we need a way to determine if that value has

// been processed.  If this went into useState/useReducer, we couldn't clear out the value without

// forcing another re-render, which we don't want.

// If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

// Actually subscribe to the nearest connected ancestor (or store)

// Pull data from the store after first render in case the store has

// changed since we began.

// It's possible that we caught an error due to a bad mapState function, but the

// parent re-rendered without this component and we're about to unmount.

// This shouldn't happen as long as we do top-down subscriptions correctly, but

// if we ever do those wrong, this throw will surface the error in our tests.

// In that case, throw the error from here so it doesn't get lost.

// Now that all that's done, we can finally try to actually render the child component.

// We memoize the elements for the rendered child component as an optimization.

// If React sees the exact same element reference as last time, it bails out of re-rendering

// that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

// If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/shallowEqual.js

// EXTERNAL MODULE: ./node_modules/symbol-observable/es/index.js

// CONCATENATED MODULE: ./node_modules/redux/es/redux.js

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

// When a store is created, an "INIT" action is dispatched so that every

// reducer returns their initial state. This effectively populates

// the initial state tree.

// This action has a similiar effect to ActionTypes.INIT.

// Any reducers that existed in both the new and old rootReducer

// will receive the previous state. This effectively populates

// the new state tree with any relevant data from the old one.

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

// This is used to make sure we don't warn about the same

// keys multiple times.

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/wrapMapToProps.js

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// whether mapToProps needs to be invoked when props have changed.

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// therefore not reporting its length accurately..

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// this function wraps mapToProps in a proxy function which does several things:

//  * Detects whether the mapToProps function being called depends on props, which

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//  * On first call, handles mapToProps if returns another function, and treats that

//    new function as the true mapToProps for subsequent calls.

//  * On first call, verifies the first result is a plain object, in order to warn

//    the developer that their mapToProps function is not returning a valid result.

// allow detectFactoryAndVerify to get ownProps

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapDispatchToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapStateToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mergeProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/verifySubselectors.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/selectorFactory.js

// TODO: Add more comments

// If pure is true, the selector returned by selectorFactory will memoize its results,

// allowing connectAdvanced's shouldComponentUpdate to return false if final

// props have not changed. If false, the selector will always return a new

// object and shouldComponentUpdate will always return true.

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/connect.js

/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

// createConnect with default args builds the 'official' connect behavior. Calling it with

// different options opens up some testing and extensibility scenarios

// used in error messages

// used to compute Connect's displayName from the wrapped component's displayName.

// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes

// passed through to selectorFactory

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useReduxContext.js

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useStore.js

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useDispatch.js

/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useSelector.js

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/reactBatchedUpdates.js

/* eslint-disable import/no-unresolved */

// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js

/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// CONCATENATED MODULE: ./node_modules/resolve-pathname/esm/resolve-pathname.js

// About 1.5x faster than the two-arg version of Array#splice()

// This implementation is based heavily on node's url.parse

// to is absolute

// to is relative, drop the filename

// CONCATENATED MODULE: ./node_modules/value-equal/esm/value-equal.js

// Test for strict equality first.

// Otherwise, if either of them == null they are not equal.

// CONCATENATED MODULE: ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js

// CONCATENATED MODULE: ./node_modules/history/esm/history.js

// Two-arg form: push(path, state)

// One-arg form: push(location)

// Resolve incomplete/relative pathname relative to current location.

// When there is no prior location and pathname is empty, set it to /

// TODO: If another transition starts while we're still confirming

// the previous one, we may end up in a weird state. Figure out the

// best way to handle this.

// Return false from a transition hook to cancel the transition.

// eslint-disable-line no-alert

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

// IE 11 sometimes throws when accessing window.history.state

// See https://github.com/ReactTraining/history/pull/289

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */

/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */

// Ignore extraneous popstate events in WebKit.

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

// TODO: We could probably make this more reliable by

// keeping a list of keys we've seen in sessionStorage.

// Instead, we just default to 0 for keys we don't know.

// Public interface

// We can't use window.location.hash here because it's not

// consistent across browsers - Firefox will pre-decode it!

// Ensure we always have a properly-encoded hash.

// A hashchange doesn't always == location change.

// Ignore this change; we already setState in push/replace.

// keeping a list of paths we've seen in sessionStorage.

// Instead, we just default to 0 for paths we don't know.

// Ensure the hash is encoded properly before doing anything else.

// We cannot tell if a hashchange was caused by a PUSH, so we'd

// rather setState here and ignore the hashchange. The caveat here

// is that other hash histories in the page will consider it a POP.

// We cannot tell if a hashchange was caused by a REPLACE, so we'd

/**
 * Creates a history object that stores locations in memory.
 */

// Mimic the behavior of DOM histories by

// causing a render after a cancelled POP.

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inheritsLoose.js

// This is a bit of a hack. We have to start listening for location

// changes here in the constructor in case there are any <Redirect>s

// on the initial render. If there are, they will replace/push when

// they mount and since cDM fires in children before parents, we may

// get a new location before the <Router> is mounted.

/**
 * The public API for a <Router> that stores location in memory.
 */

/**
 * The public API for prompting the user before navigating away from a screen.
 */

/**
 * Public API for generating a URL pathname from a path and parameters.
 */

/**
 * The public API for navigating programmatically with a component.
 */

// When rendering in a static context,

// set the new location immediately.

/**
 * Public API for matching a URL pathname to a path.
 */

// the path used to match

// the matched portion of the URL

// whether or not we matched exactly

/**
 * The public API for matching a single path and rendering.
 */

// Preact uses an empty array as children by

// default, so use null if that's the case.

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

/**
 * The public API for rendering the first <Route> that matches.
 */

// We use React.Children.forEach instead of React.Children.toArray().find()

// here because toArray adds keys to all child elements and we do not want

// to trigger an unmount/remount for two <Route>s that render the same

// component at different URLs.

/**
 * A public higher-order component to access the imperative API
 */

//# sourceMappingURL=react-router.js.map

// CONCATENATED MODULE: ./node_modules/react-router-dom/esm/react-router-dom.js

/**
 * The public API for a <Router> that uses HTML5 history.
 */

/**
 * The public API for a <Router> that uses window.location.hash.
 */

// onClick prevented default

// ignore everything but left clicks

// React 15 compat

/**
 * The public API for rendering a history-aware <a>.
 */

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

/* Styles applied to the root element if there are children and not `src` or `srcSet`. */

/* Styles applied to the root element if `variant="circle"`. */

/* Styles applied to the root element if `variant="rounded"`. */

/* Styles applied to the root element if `variant="square"`. */

/* Styles applied to the img element if either `src` or `srcSet` is defined. */

// Handle non-square image. The property isn't supported by IE 11.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/setRef.js

// TODO: Make it private only in v5

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/useForkRef.js

/**
   * This will create a new function if the ref props change and are defined.
   * This means react will call the old forkRef with `null` and the new forkRef
   * with the ref. Cleanup naturally emerges from this behavior
   */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/useEventCallback.js

/**
 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
 *
 * @param {function} fn
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/NoSsr/NoSsr.js

/**
 * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).
 *
 * This component can be useful in a variety of situations:
 * - Escape hatch for broken dependencies not supporting SSR.
 * - Improve the time-to-first paint on the client by only rendering above the fold.
 * - Reduce the rendering time on the server.
 * - Under too heavy server load, you can turn on service degradation.
 */

// We need the Fragment here to force react-docgen to recognise NoSsr as a component.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/focusVisible.js

// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js

/**
 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
 * If the most recent user interaction was via the keyboard;
 * and the key press did not include a meta, alt/option, or control key;
 * then the modality is keyboard. Otherwise, the modality is not keyboard.
 * @param {KeyboardEvent} event
 */

/**
 * If at any point a user clicks with a pointing device, ensure that we change
 * the modality away from keyboard.
 * This avoids the situation where a user presses a key on an already focused
 * element, and then clicks on a different element, focusing it with a
 * pointing device, while we still think we're in keyboard modality.
 */

// browsers not implementing :focus-visible will throw a SyntaxError

// we use our own heuristic for those browsers

// rethrow might be better if it's not the expected error but do we really

// want to crash if focus-visible malfunctioned?

// no need for validFocusTarget check. the user does that by attaching it to

// focusable events only

/**
 * Computes whether the given element should automatically trigger the
 * `focus-visible` class being added, i.e. whether it should always match
 * `:focus-visible` when focused.
 * @param {Element} node
 * @return {boolean}
 */

/**
 * Should be called if a blur event is fired on a focus-visible element
 */

// To detect a tab/window switch, we look for a blur event followed

// rapidly by a visibility change.

// If we don't see a visibility change within 100ms, it's probably a

// regular focus change.

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 3 modules

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js

// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/utils/ChildMapping.js

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */

// run the map function here instead so that the key is the computed one

/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */

// For each key of `next`, the list of keys to insert before that key in

// the combined list

// Finally, add the keys which didn't appear before any key in `next`

// item is new (entering)

// item hasn't changed transition states

// copy over the last transition props;

// console.log('unchanged', key)

// item is old (exiting)

// console.log('leaving', key)

// console.log('entering', key)

// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/TransitionGroup.js

// Initial children should all be entering, dependent on appear

/**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/ButtonBase/Ripple.js

/**
 * @ignore - internal component.
 */

// Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority

// react-transition-group#onExit

// react-transition-group#onExited

// Used to filter out mouse emulated events on mobile.

// We use a timer in order to only show the ripples for touch "click" like events.

// We don't want to display the ripple for touch scroll events.

// For some reason the animation is broken on Mobile Chrome if the size if even.

// Touche devices

// Prepare the ripple effect.

// Delay the execution of the ripple effect.

// The touch interaction occurs too quickly.

// We still want to show ripple effect.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/ButtonBase/TouchRipple.js

/* Styles applied to the internal `Ripple` components `ripple` class. */

/* Styles applied to the internal `Ripple` components `rippleVisible` class. */

/* Styles applied to the internal `Ripple` components `ripplePulsate` class. */

/* Styles applied to the internal `Ripple` components `child` class. */

/* Styles applied to the internal `Ripple` components `childLeaving` class. */

/* Styles applied to the internal `Ripple` components `childPulsate` class. */

// Fix for https://github.com/facebook/react/issues/7769

// Check if key is already down to avoid repeats being counted as multiple activations

// Keyboard accessibility for non interactive elements

// Remove grey highlight

// Reset default value

// We disable the focus ring for mouse, touch and keyboard users.

// Remove the margin in Safari

// Remove the padding in Firefox

// Reset

// So we take precedent over the style of a native <a /> element.

// Disable link interactions

/* Pseudo-class applied to the root element if `disabled={true}`. */

/* Pseudo-class applied to the root element if keyboard focused. */

// Reset on touch devices, it doesn't add specificity

/* Styles applied to the span element that wraps the children. */

// Ensure the correct width for iOS Safari

/* Styles applied to the root element if `variant="text"`. */

/* Styles applied to the root element if `variant="text"` and `color="primary"`. */

/* Styles applied to the root element if `variant="text"` and `color="secondary"`. */

/* Styles applied to the root element if `variant="outlined"`. */

/* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */

/* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */

/* Styles applied to the root element if `variant="contained"`. */

/* Styles applied to the root element if `variant="contained"` and `color="primary"`. */

/* Styles applied to the root element if `variant="contained"` and `color="secondary"`. */

/* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */

/* Styles applied to the root element if `color="inherit"`. */

/* Styles applied to the root element if `size="small"` and `variant="text"`. */

/* Styles applied to the root element if `size="large"` and `variant="text"`. */

/* Styles applied to the root element if `size="small"` and `variant="outlined"`. */

/* Styles applied to the root element if `size="large"` and `variant="outlined"`. */

/* Styles applied to the root element if `size="small"` and `variant="contained"`. */

/* Styles applied to the root element if `size="large"` and `variant="contained"`. */

/* Styles applied to the root element if `size="small"`. */

/* Styles applied to the root element if `size="large"`. */

/* Styles applied to the root element if `fullWidth={true}`. */

/* Styles applied to the startIcon element if supplied. */

/* Styles applied to the endIcon element if supplied. */

/* Styles applied to the icon element if supplied and `size="small"`. */

/* Styles applied to the icon element if supplied and `size="medium"`. */

/* Styles applied to the icon element if supplied and `size="large"`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/ButtonBase/ButtonBase.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/makeStyles.js

// Antialiasing.

// Change from `box-sizing: content-box` so that `width`

// is not affected by `padding` or `border`.

// Remove the margin in all browsers.

// Save printer ink.

// Add support for document.body.requestFullScreen().

// Other elements, if background transparent, are not supported.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/CssBaseline/CssBaseline.js

/**
 * Kickstart an elegant, consistent, and simple baseline to build upon.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FormControl/formControlState.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FormControl/FormControlContext.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/debounce.js

// Corresponds to 10 frames at 60 Hz.

// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.

// eslint-disable-next-line consistent-this

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/TextareaAutosize/TextareaAutosize.js

// Visibility needed to hide the extra text area on iPads

// Remove from the content flow

// Ignore the scrollbar width

// Create a new layer, increase the isolation of the computed values

// Measure height of a textarea with a single row

// The height of the outer content

// Take the box sizing into account for applying this value as a style.

// Need a large enough different to update the height.

// This prevents infinite rendering loop.

// Need a large enough different to allow scrolling.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/InputBase/utils.js

// Supports determination of isControlled().

// Controlled input accepts its current value as a prop.

// @see https://facebook.github.io/react/docs/forms.html#controlled-components

// @param value

// @returns {boolean} true if string (including '') or number (including zero)

// Determine if field is empty or filled.

// Response determines if label is presented above field or as placeholder.

// @param obj

// @param SSR

// @returns {boolean} False when not present or empty string.

//                    True when any number or string with length.

// Determine if an Input is adorned on start.

// It's corresponding to the left with LTR.

// @returns {boolean} False when no adornments.

//                    True when adorned at the start.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/InputBase/InputBase.js

/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */

// The blur won't fire when the disabled state is set on a focused input.

// We need to book keep the focused state manually.

// Check the input state on mount, in case it was filled by the user

// or auto filled by the browser before the hydration (for SSR).

// eslint-disable-line react-hooks/exhaustive-deps

// Rename ref to inputRef as we don't know the

// provided `inputComponent` structure.

// Provide a fake value as Chrome might not let you access it for security reasons.

// Perform in the willUpdate

// Fix a bug with IE 11 where the focus/blur events are triggered

// while the input is disabled.

// Mimics the default input display property used by browsers for an input.

// Reset (19px), match the native input line-height

// Prevent padding issue with fullWidth.

/* Styles applied to the root element if the component is a descendant of `FormControl`. */

/* Styles applied to the root element if the component is focused. */

/* Styles applied to the root element if `disabled={true}`. */

/* Styles applied to the root element if `startAdornment` is provided. */

/* Styles applied to the root element if `endAdornment` is provided. */

/* Styles applied to the root element if `error={true}`. */

/* Styles applied to the `input` element if `margin="dense"`. */

/* Styles applied to the root element if `multiline={true}`. */

/* Styles applied to the root element if the color is secondary. */

/* Styles applied to the `input` element. */

// Reset for Safari

// Make the flex item shrink with Firefox

// Fix IE 11 width issue

// Firefox 19+

// IE 11

// Edge

// Reset Firefox invalid required input style

// Remove the padding when type=search.

// Show and hide the placeholder logic

/* Styles applied to the `input` element if `select={true}`. */

/* Styles applied to the `input` element if `multiline={true}`. */

/* Styles applied to the `input` element if `type="search"`. */

// Improve type search style.

/* Styles applied to the `input` element if `startAdornment` is provided. */

/* Styles applied to the `input` element if `endAdornment` is provided. */

/* Styles applied to the `input` element if `hiddenLabel={true}`. */

/* Styles applied to the root element if color secondary. */

/* Styles applied to the root element if `disableUnderline={false}`. */

// Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FilledInput/FilledInput.js

/* Pseudo-class applied to the root element if the component is focused. */

/* Styles applied to the `input` if in `<FormControl hiddenLabel />`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/useTheme.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/OutlinedInput/NotchedOutline.js

// IE 11: fieldset with legend does not render

// a border radius. This maintains consistency

// by always having a legend rendered

// Match the Input Label

/* Styles applied to the legend element. */

/* Styles applied to the `NotchedOutline` element. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FormControl/useFormControl.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FormLabel/FormLabel.js

/* Pseudo-class applied to the root element if `focused={true}`. */

/* Pseudo-class applied to the root element if `error={true}`. */

/* Pseudo-class applied to the root element if `filled={true}`. */

/* Pseudo-class applied to the root element if `required={true}`. */

/* Styles applied to the asterisk element. */

/* Pseudo-class applied to the asterisk element. */

// slight alteration to spec spacing to match visual spec result

/* Styles applied to the root element if `margin="dense"`. */

// Compensation for the `Input.inputDense` style.

/* Styles applied to the `input` element if `shrink={true}`. */

/* Styles applied to the `input` element if `disableAnimation={false}`. */

/* Styles applied to the root element if `variant="filled"`. */

// Chrome's autofill feature gives the input field a yellow background.

// Since the input field is behind the label in the HTML tree,

// the input field is drawn last and hides the label with an opaque background color.

// zIndex: 1 will raise the label above opaque background-colors of input.

// see comment above on filled.zIndex

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/isMuiElement.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FormControl/FormControl.js

// We need to iterate through the children and find the Input in order

// to fully support server-side rendering.

// Reset fieldset default style.

/* Styles applied to the root element if `margin="normal"`. */

/* Styles applied to the root element if `variant="filled"` or `variant="outlined"`. */

/**
 * Provides context such as filled/focused/error/required for form inputs.
 * Relying on the context provides high flexibility and ensures that the state always stays
 * consistent across the children of the `FormControl`.
 * This context is used by the following components:
 *
 *  - FormLabel
 *  - FormHelperText
 *  - Input
 *  - InputLabel
 *
 * You can find one composition example below and more going to [the demos](/components/text-fields/#components).
 *
 * ```jsx
 * <FormControl>
 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
 *   <Input id="my-input" aria-describedby="my-helper-text" />
 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
 * </FormControl>
 * ```
 *
 * ⚠️Only one input can be used within a FormControl.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/ownerDocument.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/ownerWindow.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/createChainedFunction.js

/**
 * Safe chained function
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 *
 * @param {function} functions to chain
 * @returns {function|null}
 */

// EXTERNAL MODULE: ./node_modules/@material-ui/styles/esm/getThemeProps/getThemeProps.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Portal/Portal.js

/**
 * Portals provide a first-class way to render children into a DOM node
 * that exists outside the DOM hierarchy of the parent component.
 */

// #StrictMode ready

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/getScrollbarSize.js

// A change of the browser zoom change the scrollbar size.

// Credit https://github.com/twbs/bootstrap/blob/3ffe3a5d82f6f561b82ff78d82b32a7d14aed558/js/src/modal.js#L512-L519

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Modal/ModalManager.js

// Is a vertical scrollbar displayed?

// Improve Gatsby support

// https://css-tricks.com/snippets/css/force-vertical-scrollbar/

// Block the scroll even if no scrollbar is visible to account for mobile keyboard

// screensize shrink.

// Use computed style, here to get the real padding to add our scrollbar width.

// .mui-fixed is a global helper.

/**
 * @ignore - do not document.
 *
 * Proper state management for containers and the modals in those containers.
 * Simplified, but inspired by react-overlay's ModalManager class.
 * Used by the Modal to ensure proper styling of containers.
 */

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js

// this.modals[modalIndex] = modal

// this.containers[containerIndex] = {

//   modals: [],

//   container,

//   restore: null,

// }

// If the modal we are adding is already in the DOM.

// If that was the last modal in a container, clean up the container.

// The modal might be closed before it had the chance to be mounted in the DOM.

// In case the modal wasn't in the DOM yet.

// Otherwise make sure the next top modal is visible to a screen reader.

// as soon as a modal is adding its modalRef is undefined. it can't set

// aria-hidden because the dom element doesn't exist either

// when modal was unmounted before modalRef gets null

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Modal/TrapFocus.js

/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex */

// ⚠️ You may rely on React.useMemo as a performance optimization, not as a semantic guarantee.

// https://reactjs.org/docs/hooks-reference.html#usememo

// We might render an empty child.

// 9 = Tab

// We need to ignore the next contain as

// it will try to move the focus back to the rootRef element.

// Make sure the next tab starts from the right place.

// With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area

// e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.

// The whatwg spec defines how the browser should behave but does not explicitly mention any events:

// https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.

// restoreLastFocus()

// In IE 11 it is possible for document.activeElement to be null resulting

// in nodeToRestore.current being null.

// Not all elements in IE 11 have a focus method.

// Once IE 11 support is dropped the focus() call can be unconditional.

/*

In the future, we should be able to replace TrapFocus with:
https://github.com/facebook/react/blob/master/packages/react-events/docs/FocusScope.md

```jsx
import FocusScope from 'react-dom/FocusScope';

function TrapFocus(props) {
  const {
    children
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableRestoreFocus = false,
    open,
  } = props;

  if (!open) {
    return children;
  }

  return (
    <FocusScope
      autoFocus={!disableAutoFocus}
      contain={!disableEnforceFocus}
      restoreFocus={!disableRestoreFocus}
    >
      {children}
    </FocusScope>
  );
}
```

*/

// Disable scroll capabilities.

/* Styles applied to the root element if `invisible={true}`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Modal/SimpleBackdrop.js

// A modal manager used to track and manage the state of open Modals.

// Modals don't open on the server so this won't conflict with concurrent requests.

// Fix a bug on Chrome where the scroll isn't initially 0.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Modal/Modal.js

// The element was already mounted.

/* Styles applied to the root element if the `Modal` has exited. */

// It's a Transition like component

// We don't take event.defaultPrevented into account:

// event.preventDefault() is meant to stop default behaviours like

// clicking a checkbox to check it, hitting a button to submit a form,

// and hitting left arrow to move the cursor in a text input etc.

// Only special HTML elements have these default behaviors.

// Swallow the event, in case someone is listening for the escape key on the body.

// In the context of a TransitionGroup all enters are really appears

// getSnapshotBeforeUpdate(prevProps) {

//   let nextStatus = null

//   if (prevProps !== this.props) {

//     const { status } = this.state

//     if (this.props.in) {

//       if (status !== ENTERING && status !== ENTERED) {

//         nextStatus = ENTERING

//       }

//     } else {

//       if (status === ENTERING || status === ENTERED) {

//         nextStatus = EXITING

//     }

//   }

//   return { nextStatus }

// TODO: remove fallback for next major

// nextStatus will always be ENTERING or EXITING.

// no enter animation skip right to ENTERED

// if we are mounting and running this it means appear _must_ be set

// no exit animation skip right to EXITED

// This shouldn't be necessary, but there are weird race conditions with

// setState callbacks and unmounting in testing, so always make sure that

// we can cancel any pending setState callbacks after we unmount.

// filter props for Transtition

// allows for nested Transitions

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/transitions/utils.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Grow/Grow.js

// So the animation always start from the start.

/**
 * The Grow transition is used by the [Tooltip](/components/tooltips/) and
 * [Popover](/components/popover/) components.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */

/* Styles applied to the root element if `square={false}`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Paper/Paper.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Popover/Popover.js

// Sum the scrollTop between two elements.

// != the default value

// Check if the parent has requested anchoring on an inner content node

// Get the offset of of the anchoring element

// Calculate element positioning

// Check if the vertical axis needs shifting

// Check if the horizontal axis needs shifting

// If the container prop is provided, use that

// If the anchorEl prop is provided, use its parent body element as the container

// If neither are provided let the Modal take care of choosing the container

/* Styles applied to the root element */

/* Styles applied to the `Paper` component. */

// So we see the popover when it's empty.

// It's most likely on issue on userland.

/* Styles applied to the root element if `disablePadding={false}`. */

/* Styles applied to the root element if dense. */

/* Styles applied to the root element if a `subheader` is provided. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/List/List.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/MenuList/MenuList.js

// jsdom doesn't support innerText

// Prevent infinite loop.

// Move to the next element.

// Let's ignore that piece of logic if users are already overriding the width

// of the menu.

// since we inject focus related props into children we have to do a lookahead

// to check if there is a `selected` item. We're looking for the last `selected`

// item and use the first valid item as a fallback

// Prevent scroll of the page

// specZ: The maximum height of a simple menu should be one or more rows less than the view

// height. This ensures a tapable area outside of the simple menu with which to dismiss

// the menu.

// Add iOS momentum scrolling.

/* Styles applied to the `List` component via `MenuList`. */

/**
 * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton
 * It's exposed to help customization of the [`Menu`](/api/menu/) component. If you
 * use it separately you need to move focus into the component manually. Once
 * the focus is placed inside the component it is fully keyboard accessible.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Select/SelectInput.js

// No need to display any value if the field is empty.

// Preact support, target is read only property on a native event.

// The value is most likely not a valid HTML attribute.

// Avoid performing a layout computation in the render method.

// TODO v5: merge root and select

// The native select doesn't respond to enter on MacOS, but it's recommended by

// https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html

// if open event.stopImmediatePropagation

// The id is required for proper a11y

// eslint-disable-next-line react/no-danger

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/internal/svg-icons/createSvgIcon.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/internal/svg-icons/ArrowDropDown.js

/* Styles applied to the select component `root` class. */

/* Styles applied to the select component `select` class. */

// When interacting quickly, the text can end up selected.

// Native select can't be selected either.

// So it doesn't collapse.

// Show that it's not an text input

// Remove IE 11 arrow

/* Styles applied to the select component if `variant="filled"`. */

/* Styles applied to the select component if `variant="outlined"`. */

/* Styles applied to the select component `selectMenu` class. */

/* Pseudo-class applied to the select component `disabled` class. */

/* Styles applied to the icon component. */

// We use a position absolute over a flexbox in order to forward the pointer events

// to the input.

// Center vertically

/* Styles applied to the icon component if the popup is open. */

/* Styles applied to the icon component if `variant="filled"`. */

/* Styles applied to the icon component if `variant="outlined"`. */

// Most of the logic is implemented in `NativeSelectInput`.

// The `Select` component is a simple API wrapper to expose something better to play with.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/NativeSelect/NativeSelectInput.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Select/Select.js

// Most of the logic is implemented in `SelectInput`.

// We render a select. We can ignore the type provided by the `Input`.

// unset defaults from textbox inputs

/* Styles applied to the root element if `variant="body2"`. */

/* Styles applied to the root element if `variant="body1"`. */

/* Styles applied to the root element if `variant="caption"`. */

/* Styles applied to the root element if `variant="button"`. */

/* Styles applied to the root element if `variant="h1"`. */

/* Styles applied to the root element if `variant="h2"`. */

/* Styles applied to the root element if `variant="h3"`. */

/* Styles applied to the root element if `variant="h4"`. */

/* Styles applied to the root element if `variant="h5"`. */

/* Styles applied to the root element if `variant="h6"`. */

/* Styles applied to the root element if `variant="subtitle1"`. */

/* Styles applied to the root element if `variant="subtitle2"`. */

/* Styles applied to the root element if `variant="overline"`. */

/* Styles applied to the root element if `variant="srOnly"`. Only accessible to screen readers. */

/* Styles applied to the root element if `align="left"`. */

/* Styles applied to the root element if `align="center"`. */

/* Styles applied to the root element if `align="right"`. */

/* Styles applied to the root element if `align="justify"`. */

/* Styles applied to the root element if `nowrap={true}`. */

/* Styles applied to the root element if `gutterBottom={true}`. */

/* Styles applied to the root element if `paragraph={true}`. */

/* Styles applied to the root element if `color="textPrimary"`. */

/* Styles applied to the root element if `color="textSecondary"`. */

/* Styles applied to the root element if `display="inline"`. */

/* Styles applied to the root element if `display="block"`. */

/* Styles applied to the root element if `underline="none"`. */

/* Styles applied to the root element if `underline="hover"`. */

/* Styles applied to the root element if `underline="always"`. */

// Same reset as ButtonBase.root

/* Styles applied to the root element if `component="button"`. */

/* Pseudo-class applied to the root element if the link is keyboard focused. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/TextField/TextField.js

// Default CSS values

// flex: '0 1 auto',

// flexDirection: 'row',

// alignItems: 'flex-start',

// flexWrap: 'nowrap',

// justifyContent: 'flex-start',

/* Styles applied to the root element if `container={true}`. */

/* Styles applied to the root element if `item={true}`. */

/* Styles applied to the root element if `zeroMinWidth={true}`. */

/* Styles applied to the root element if `direction="column"`. */

/* Styles applied to the root element if `direction="column-reverse"`. */

/* Styles applied to the root element if `direction="rwo-reverse"`. */

/* Styles applied to the root element if `wrap="nowrap"`. */

/* Styles applied to the root element if `wrap="reverse"`. */

/* Styles applied to the root element if `alignItems="center"`. */

/* Styles applied to the root element if `alignItems="flex-start"`. */

/* Styles applied to the root element if `alignItems="flex-end"`. */

/* Styles applied to the root element if `alignItems="baseline"`. */

/* Styles applied to the root element if `alignContent="center"`. */

/* Styles applied to the root element if `alignContent="flex-start"`. */

/* Styles applied to the root element if `alignContent="flex-end"`. */

/* Styles applied to the root element if `alignContent="space-between"`. */

/* Styles applied to the root element if `alignContent="space-around"`. */

/* Styles applied to the root element if `justify="center"`. */

/* Styles applied to the root element if `justify="flex-end"`. */

/* Styles applied to the root element if `justify="space-between"`. */

/* Styles applied to the root element if `justify="space-around"`. */

/* Styles applied to the root element if `justify="space-evenly"`. */

// Use side effect over immutability for better performance.

// Keep 7 significant numbers.

// Close to the bootstrap implementation:

// https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41

// For the auto layouting

// No need for a media query for the first size.

// CONCATENATED MODULE: ./node_modules/@material-ui/system/esm/merge.js

// CONCATENATED MODULE: ./node_modules/@material-ui/system/esm/css.js

// CONCATENATED MODULE: ./node_modules/@material-ui/system/esm/compose.js

// Alternative approach that doesn't yield any performance gain.

// const handlers = styles.reduce((acc, style) => {

//   style.filterProps.forEach(prop => {

//     acc[prop] = style;

//   });

//   return acc;

// }, {});

// const fn = props => {

//   return Object.keys(props).reduce((acc, prop) => {

//     if (handlers[prop]) {

//       return merge(acc, handlers[prop](props));

//     return acc;

//   }, {});

// };

// Sorted ASC by size. That's important.

// It can't be configured as it's used statically for propTypes.

// CONCATENATED MODULE: ./node_modules/@material-ui/system/esm/breakpoints.js

// The breakpoint **start** at this value.

// For instance with the first breakpoint xs: [xs, sm[.

// CONCATENATED MODULE: ./node_modules/@material-ui/system/esm/style.js

// CONCATENATED MODULE: ./node_modules/@material-ui/system/esm/borders.js

// CONCATENATED MODULE: ./node_modules/@material-ui/system/esm/sizing.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js

// CONCATENATED MODULE: ./node_modules/@material-ui/system/esm/memoize.js

// CONCATENATED MODULE: ./node_modules/@material-ui/system/esm/spacing.js

// It's not a shorthand notation.

// Using a hash computation over an array iteration could be faster, but with only 28 items,

// it's doesn't worth the bundle size.

// CONCATENATED MODULE: ./node_modules/@material-ui/system/esm/typography.js

// styled-components's API removes the mapping between components and styles.

// Using components as a low-level styling construct can be simpler.

/* eslint-disable react/forbid-foreign-prop-types */

/* eslint-enable react/forbid-foreign-prop-types */

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/styled/styled.js

/* Styles applied to the root element if `fixed={true}`. */

/* Styles applied to the root element if `maxWidth="xs"`. */

/* Styles applied to the root element if `maxWidth="sm"`. */

/* Styles applied to the root element if `maxWidth="md"`. */

/* Styles applied to the root element if `maxWidth="lg"`. */

/* Styles applied to the root element if `maxWidth="xl"`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/styled.js

// CONCATENATED MODULE: ./src/api/api.js

//User 相關 api

//User相關的api method

// CONCATENATED MODULE: ./src/components/SingIn.js

// Fix IE 11 issue.

// CONCATENATED MODULE: ./src/components/Signup.js

//把action 的dispatch 和header map再一起

// ...

// CONCATENATED MODULE: ./src/components/Header.js

// CONCATENATED MODULE: ./src/routers/PrivateRoute.js

// CONCATENATED MODULE: ./src/routers/PublicRoute.js

/* Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused. */

/* Styles applied to the overlay that covers the action area when it is keyboard focused. */

/* Styles applied to the root element if `component="video, audio, picture, iframe, or img"`. */

/* Styles applied to the root element if `component="picture or img"`. */

// ⚠️ object-fit is not supported by IE 11.

// CONCATENATED MODULE: ./src/components/ListQanda.js

//解構props 抓很重要

// CONCATENATED MODULE: ./src/components/ListFilters.js

// CONCATENATED MODULE: ./src/components/FoodListFilters.js

// assure the correct width for iOS Safari

/* Styles applied to the root element if `variant="extended"`. */

/* Styles applied to the root element if `size="small"``. */

/* Styles applied to the root element if `size="medium"``. */

// CONCATENATED MODULE: ./src/components/QandaListFilters.js

// CONCATENATED MODULE: ./src/components/Footer.js

// CONCATENATED MODULE: ./src/components/ListRenderLogic.js

// CONCATENATED MODULE: ./src/components/List.js

// import {FormattedMessage, FormattedHTMLMessage} from 'react-intl';

//用selector搭配filter去把state map 到 props

// Use div by default.

// Avoid nesting of li > li.

/* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */

/* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */

/* Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */

/* Styles applied to the `component` element if dense. */

/* Styles applied to the `component` element if `alignItems="flex-start"`. */

/* Pseudo-class applied to the inner `component` element if `disabled={true}`. */

/* Styles applied to the inner `component` element if `divider={true}`. */

/* Styles applied to the inner `component` element if `disableGutters={false}`. */

/* Styles applied to the inner `component` element if `button={true}`. */

/* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */

// Add some space to avoid collision as `ListItemSecondaryAction`

// is absolutely positioned.

/* Pseudo-class applied to the root element if `selected={true}`. */

// Reset browser default style.

/* Styles applied to the root element if `absolute={true}`. */

/* Styles applied to the root element if `variant="inset"`. */

/* Styles applied to the root element if `light={true}`. */

/* Styles applied to the root element if `variant="middle"`. */

/* Styles applied to the root element if `orientation="vertical"`. */

/* Styles applied to the `Typography` components if primary and secondary are set. */

/* Styles applied to the `Typography` components if dense. */

/* Styles applied to the root element if `inset={true}`. */

/* Styles applied to the primary `Typography` component. */

/* Styles applied to the secondary `Typography` component. */

/* Styles applied to the root element when the parent `ListItem` uses `alignItems="flex-start"`. */

// CONCATENATED MODULE: ./src/components/Comment.js

/* Styles applied to the root element if `disableGutters={false}`. */

/* Styles applied to the root element if `selected={true}`. */

// Ignore the events not coming from the "backdrop"

// We don't want to close the dialog when clicking the dialog content.

// Make sure the event starts and ends on the same DOM element.

// Use !important to override the Modal inline-style.

/* Styles applied to the container element if `scroll="paper"`. */

/* Styles applied to the container element if `scroll="body"`. */

/* Styles applied to the container element. */

// Fix IE 11 issue, to remove at some point.

/* Styles applied to the `Paper` component if `scroll="paper"`. */

/* Styles applied to the `Paper` component if `scroll="body"`. */

/* Styles applied to the `Paper` component if `maxWidth=false`. */

/* Styles applied to the `Paper` component if `maxWidth="xs"`. */

/* Styles applied to the `Paper` component if `maxWidth="sm"`. */

/* Styles applied to the `Paper` component if `maxWidth="md"`. */

/* Styles applied to the `Paper` component if `maxWidth="lg"`. */

/* Styles applied to the `Paper` component if `maxWidth="xl"`. */

/* Styles applied to the `Paper` component if `fullWidth={true}`. */

/* Styles applied to the `Paper` component if `fullScreen={true}`. */

/* Styles applied to the root element if `disableSpacing={false}`. */

// dialog without title

/* Styles applied to the root element if `dividers={true}`. */

// CONCATENATED MODULE: ./src/components/PixelPagePlaces.js

// CONCATENATED MODULE: ./src/components/PixelPageFood.js

// CONCATENATED MODULE: ./src/components/QandAPage.js

//表單送出邏輯

/* Styles applied to the root element if `disableSticky={false}`. */

/* Styles applied to the container element when the transition has entered. */

/* Styles applied to the container element when the transition has exited and `collapsedHeight` != 0px. */

/* Styles applied to the outer wrapper element. */

// Hack to get children with a negative margin to not falsify the height computation.

/* Styles applied to the inner wrapper element. */

// EXTERNAL MODULE: ./node_modules/@material-ui/icons/Language.js

// CONCATENATED MODULE: ./src/components/EventPage.js

// CONCATENATED MODULE: ./src/components/CreateQandaForm.js

// CONCATENATED MODULE: ./src/components/EditEventForm.js

// single pic uplaod

// CONCATENATED MODULE: ./src/components/EditPlaceForm.js

// CONCATENATED MODULE: ./src/components/EditFoodForm.js

// CONCATENATED MODULE: ./src/components/EditQandaForm.js

// CONCATENATED MODULE: ./src/components/DashboardPage.js

// CONCATENATED MODULE: ./src/routers/SubRouterHualien.js

//裝飾Button的style

//設定 id hualien 是根目錄 name是會顯示出來的string childs是會有哪些顯示出來的子連結

// -hualien

// --Places

// --Food

// --Q&A

// CONCATENATED MODULE: ./src/routers/SubRouterTaipei.js

//設定 id taipei 是根目錄 name是會顯示出來的string childs是會有哪些顯示出來的子連結

// -taipei

// CONCATENATED MODULE: ./src/routers/SubRouterNewTaipei.js

//設定 id newtaipei 是根目錄 name是會顯示出來的string childs是會有哪些顯示出來的子連結

// -newtaipei

// CONCATENATED MODULE: ./src/routers/SubRouterYilan.js

//設定 id yilan 是根目錄 name是會顯示出來的string childs是會有哪些顯示出來的子連結

// -yilan

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Popper/Popper.js

// It's using scrollParent by default, we can use the viewport when using a portal.

// We could have been using a custom modifier like react-popper is doing.

// But it seems this is the best public API for this use case.

// Let's update the popper position.

// Otherwise handleExited will call this.

// Prevents scroll issue, waiting for Popper.js to add this style once initiated.

// Fix Popper.js display issue

// CONCATENATED MODULE: ./src/components/HeaderPage.js

// Prevent padding issue with the Modal and fixed positioned AppBar.

/* Styles applied to the root element if `position="fixed"`. */

/* Styles applied to the root element if `position="absolute"`. */

/* Styles applied to the root element if `position="sticky"`. */

// ⚠️ sticky is not supported by IE 11.

/* Styles applied to the root element if `position="static"`. */

/* Styles applied to the root element if `position="relative"`. */

/* Styles applied to the root element if `color="default"`. */

/* Styles applied to the avatar element. */

/* Styles applied to the action element. */

/* Styles applied to the content wrapper element. */

/* Styles applied to the title Typography element. */

/* Styles applied to the subheader Typography element. */

/* Styles applied to the root element if `variant="regular"`. */

/* Styles applied to the root element if `variant="dense"`. */

// CONCATENATED MODULE: ./src/components/CreatePage.js

// Enterprise card is full width at sm breakpoint

// EXTERNAL MODULE: ./node_modules/@material-ui/icons/AccessibilityNew.js

// Stop the event from bubbling up to the `Chip`

// Ignore events from children of `Chip`.

// label will inherit this from root, then `clickable` class overrides this for both

// Remove `button` border

// Remove `button` padding

/* Styles applied to the root element if `onClick` is defined or `clickable={true}`. */

/* Styles applied to the root element if `onClick` and `color="primary"` is defined or `clickable={true}`. */

/* Styles applied to the root element if `onClick` and `color="secondary"` is defined or `clickable={true}`. */

/* Styles applied to the root element if `onDelete` is defined. */

/* Styles applied to the root element if `onDelete` and `color="primary"` is defined. */

/* Styles applied to the root element if `onDelete` and `color="secondary"` is defined. */

// TODO remove in V5

/* Styles applied to the `avatar` element. */

/* Styles applied to the `avatar` element if `size="small"`. */

/* Styles applied to the `avatar` element if `color="primary"`. */

/* Styles applied to the `avatar` element if `color="secondary"`. */

/* Styles applied to the `icon` element. */

/* Styles applied to the `icon` element if `size="small"`. */

/* Styles applied to the `icon` element if `color="primary"`. */

/* Styles applied to the `icon` element if `color="secondary"`. */

/* Styles applied to the label `span` element`. */

/* Styles applied to the `deleteIcon` element. */

/* Styles applied to the `deleteIcon` element if `size="small"`. */

/* Styles applied to the deleteIcon element if `color="primary"` and `variant="default"`. */

/* Styles applied to the deleteIcon element if `color="secondary"` and `variant="default"`. */

/* Styles applied to the deleteIcon element if `color="primary"` and `variant="outlined"`. */

/* Styles applied to the deleteIcon element if `color="secondary"` and `variant="outlined"`. */

// CONCATENATED MODULE: ./src/components/DashboardList.js

//前面放用arrow func return的object(從物件裡挑的) 後面放要連結的component 然後對於後面的component就能用props 擷取資料

// CONCATENATED MODULE: ./src/components/CreateEventForm.js

// CONCATENATED MODULE: ./src/components/CreatePlaceForm.js

// CONCATENATED MODULE: ./src/components/CreateFoodForm.js

// CONCATENATED MODULE: ./src/routers/AppRouter.js

// CONCATENATED MODULE: ./node_modules/redux-thunk/es/index.js

// CONCATENATED MODULE: ./src/reducers/filters.js

//Filters reducer

//date or amount or like

// CONCATENATED MODULE: ./src/reducers/auth.js

// CONCATENATED MODULE: ./src/reducers/viewpoint.js

//從DB抓DATA之後 return 資料回去

// CONCATENATED MODULE: ./src/reducers/qanda.js

// CONCATENATED MODULE: ./src/reducers/comments.js

//comments Reducer

// CONCATENATED MODULE: ./src/reducers/food.js

//foods Reducer

// CONCATENATED MODULE: ./src/reducers/event.js

/**
 * This component takes a `theme` prop.
 * It makes the `theme` available down the React tree thanks to React context.
 * This component should preferably be used at **the root of your component tree**.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/ThemeProvider/ThemeProvider.js

// To support composition of theme.

// CONCATENATED MODULE: ./src/app.js

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

/* 600 */

/* 601 */

/* 602 */

/* 603 */

/* 604 */

/* 605 */

/* 606 */

/* 607 */

/* 608 */

/* 609 */

/* 610 */

/* 611 */

/* 612 */

/* 613 */

/* 614 */

/* 615 */

/* 616 */

/* 617 */

/* 618 */

/* 619 */

/* 620 */

/* 621 */

/* 622 */

/* 623 */

/* 624 */

/* 625 */

/* unused harmony export isObject */

// Avoid prototype pollution

/* 626 */

/* 627 */

/* eslint-disable no-restricted-syntax */

// Resolve default props, code borrow from React source.

// https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221

/* 628 */

/**
 * Create a rule instance.
 */

// It is an at-rule and it has no instance.

/**
 * Converts array values to string.
 *
 * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
 * `border: ['1px', '2px']` > `border: 1px, 2px;`
 * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
 * `color: ['red', !important]` > `color: red !important;`
 */

// Support space separated values via `[['5px', '10px']]`.

// Add !important, because it was ignored.

/**
 * Indent a string.
 * http://jsperf.com/array-join-vs-for
 */

/**
 * Converts a Rule to CSS string.
 */

// Apply fallbacks first.

// Array syntax {fallbacks: [{prop: value}]}

// Object syntax {fallbacks: {prop: value}}

// Allow empty style in this case, because properties will be added dynamically.

// When rule is being stringified before selector was defined.

/**
   * Get or set a style property.
   */

// It's a getter.

// Don't do anything if the value has not changed.

// Value is empty and wasn't defined before.

// We are going to remove this value.

// Renderable is defined if StyleSheet option `link` is true.

/**
   * Set selector string.
   * Attention: use this with caution. Most browsers didn't implement
   * selectorText setter, so this may result in rerendering of entire Style Sheet.
   */

/**
   * Apply rule to an element inline.
   */

/**
   * Returns JSON representation of the rule.
   * Fallbacks are not supported.
   * Useful for inline styles.
   */

/**
   * Generates a CSS string.
   */

// If selector setter is not implemented, rerender the rule.

/**
     * Get selector string.
     */

/**
   * Get a rule.
   */

/**
   * Get index of a rule.
   */

/**
   * Create and register rule, run plugins.
   */

// Animation name ref replacer.

/**
   * Contains rules objects and allows adding/removing etc.
   * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
   */

// Rules registry for access by .get() method.

// It contains the same rule registered by name and by selector.

// Original styles object.

// Used to ensure correct rules order.

/**
   * Create and register rule.
   *
   * Will not render after Style Sheet was rendered the first time.
   */

// We need to save the original decl before creating the rule

// because cache plugin needs to use it as a key to return a cached rule.

// For e.g. rules inside of @media container

/**
   * Delete a rule.
   */

/**
   * Run `onProcessRule()` plugins on every rule.
   */

// We need to clone array because if we modify the index somewhere else during a loop

// we end up with very hard-to-track-down side effects.

/**
   * Register a rule in `.map` and `.classes` maps.
   */

/**
   * Unregister a rule.
   */

/**
   * Update the function values with a new data.
   */

/**
   * Execute plugins, update rule props.
   */

// $FlowFixMe

// It is a rules container like for e.g. ConditionalRule.

// We rely on a new `style` ref in case it was mutated during onUpdate hook.

// Update and add props.

// We need to run the plugins in case new `style` relies on syntax plugins.

// We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.

// We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

// Remove props.

/**
   * Convert rules to a CSS string.
   */

// No need to render an empty rule.

/**
   * Attach renderable to the render tree.
   */

// Order is important, because we can't use insertRule API if style element is not attached.

/**
   * Remove renderable from render tree.
   */

/**
   * Add a rule to the current stylesheet.
   * Will insert a rule also after the stylesheet has been rendered first time.
   */

// Plugins can create rules.

// In order to preserve the right order, we need to queue all `.addRule` calls,

// which happen after the first `rules.add()` call.

// Don't insert rule directly if there is no stringified version yet.

// It will be inserted all together when .attach is called.

// We can't add rules to a detached style node.

// We will redeploy the sheet once user will attach it.

/**
   * Insert rule into the StyleSheet
   */

/**
   * Create and add rules.
   * Will render also after Style Sheet was rendered the first time.
   */

/**
   * Get a rule by name.
   */

/**
   * Delete a rule by name.
   * Returns `true`: if rule has been deleted from the DOM.
   */

/**
   * Deploy pure CSS string to a renderable.
   */

/**
   * Call `onCreateRule` hooks and return an object if returned by a hook.
   */

/**
   * Call `onProcessRule` hooks.
   */

/**
   * Call `onProcessStyle` hooks.
   */

/**
   * Call `onProcessSheet` hooks.
   */

/**
   * Call `onUpdate` hooks.
   */

/**
   * Call `onChangeValue` hooks.
   */

/**
   * Register a plugin.
   */

// Avoids applying same plugin twice, at least based on ref.

/**
   * Register a Style Sheet.
   */

// Find a position.

/**
   * Reset the registry.
   */

/**
   * Remove a Style Sheet.
   */

/**
   * Convert all attached sheets to a CSS string.
   */

/**
     * Current highest index number.
     */

// Bundle may contain multiple JSS versions at the same time. In order to identify

// the current version with just one short number and use it for classes generation

// we use a counter. Also it is more accurate, because user can manually reevaluate

// the module.

/**
 * Get a style property value.
 */

// Support CSSTOM.

// IE may throw if property is unknown.

/**
 * Set a style property.
 */

/**
 * Remove a style property.
 */

/**
 * Set the selector.
 */

// Return false if setter was not successful.

// Currently works in chrome only.

/**
 * Gets the `head` element upon the first call and caches it.
 * We assume it can't be null.
 */

/**
 * Find attached sheet with an index higher than the passed one.
 */

/**
 * Find a node before which we can insert the sheet.
 */

// Try to insert before the next higher sheet.

/**
 * Find attached sheet with the highest index.
 */

// Otherwise insert after the last attached.

/**
 * Find a comment with "jss" inside.
 */

// Try to find a comment placeholder if registry is empty.

// If user specifies an insertion point and it can't be found in the document -

// bad specificity issues may appear.

/**
 * Insert style element into the DOM.
 */

// In case previous insertion fails, passed index might be wrong

/**
 * Read jss nonce setting from the page if the user has set it.
 */

// HTMLStyleElement needs fixing https://github.com/facebook/flow/issues/2696

// There is no sheet when the renderer is used from a standalone StyleRule.

// Without it, IE will have a broken source order specificity if we

// insert rules after we insert the style tag.

// It seems to kick-off the source order specificity algorithm.

/**
   * Insert style element into render tree.
   */

// In the case the element node is external and it is already in the DOM.

// Works with iframes and any node types.

// https://stackoverflow.com/questions/41328728/force-casting-in-flow

// When rules are inserted using `insertRule` API, after `sheet.detach().attach()`

// most browsers create a new CSSStyleSheet, except of all IEs.

/**
   * Remove style element from render tree.
   */

/**
   * Inject CSS string into element.
   */

/**
   * Insert RuleList into an element.
   */

/**
   * Insert a rule into element.
   */

// We need to render the container without children first.

// IE keeps the CSSStyleSheet after style node has been reattached,

// so we need to check if the `renderable` reference the right style sheet and not

// rerender those rules.

/**
   * Get index of a CSS Rule.
   */

/**
   * Generate a new CSS rule and replace the existing one.
   *
   * Only used for some old browsers because they can't set a selector.
   */

/**
   * Get all rules elements.
   */

/**
   * Prepares various options, applies plugins.
   * Should not be used twice on the same instance, because there is no plugins
   * deduplication logic.
   */

// eslint-disable-next-line prefer-spread

/**
   * Create a Style Sheet.
   */

/**
   * Detach the Style Sheet and remove it from the registry.
   */

/**
   * Create a rule without a Style Sheet.
   */

// Enable rule without name for inline styles.

/**
   * Register plugin. Passed function will be invoked with a rule instance.
   */

/**
 * SheetsManager is like a WeakMap which is designed to count StyleSheet
 * instances and attach/detach automatically.
 */

/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */

/**
 * Export a constant indicating if this browser has CSSTOM support.
 * https://developers.google.com/web/updates/2018/03/cssom
 */

// CONCATENATED MODULE: ./node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.esm.js

// We need to extract function values from the declaration, so that we can keep core unaware of them.

// We need to do that only once.

// We don't need to extract functions on each style update, since this can happen only once.

// We don't support function values inside of function rules.

// If we have a style function, the entire rule is dynamic and style object

// will be returned from that function.

// Empty object will remove all currently defined props

// in case function rule returns a falsy value.

// If we have a fn values map, it is a rule with function values.

// CONCATENATED MODULE: ./node_modules/jss-plugin-global/dist/jss-plugin-global.esm.js

/**
 * Convert nested rules to separate, remove them from original styles.
 *
 * @param {Rule} rule
 * @api public
 */

// CONCATENATED MODULE: ./node_modules/jss-plugin-nested/dist/jss-plugin-nested.esm.js

// Get a function to be used for $ref replacement.

// Replace all & by the parent or prefix & with the parent.

// Options has been already created, now we only increase index.

// Lazily create the ref replacer function just once for

// all nested rules within the sheet.

// Replace all $refs.

// Place conditional right after the parent rule to ensure right ordering.

// CONCATENATED MODULE: ./node_modules/hyphenate-style-name/index.js

/* eslint-disable no-var, prefer-template */

// CONCATENATED MODULE: ./node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.esm.js

/**
 * Convert camel cased property names to dash separated.
 *
 * @param {Object} style
 * @return {Object}
 */

/**
 * Allow camel cased property names by converting them back to dasherized.
 *
 * @param {Rule} rule
 */

// Handle rules like @font-face, which can have multiple styles in an array

// There was no camel case in place

// CONCATENATED MODULE: ./node_modules/jss-plugin-default-unit/dist/jss-plugin-default-unit.esm.js

/**
 * Clones the object and adds a camel cased property version.
 */

// Animation properties

// Background properties

// Border Properties

// Margin properties

// Padding properties

// Mask properties

// Width and height properties

// Position properties

// Shadow properties

// Column properties

// Font and text properties

// Motion properties

// Outline properties

// Perspective properties

// Transform properties

// Transition properties

// Alignment properties

// Some random properties

// Grid properties

// Not existing properties.

// Used to avoid issues with jss-plugin-expand integration.

/**
 * Recursive deep style passing function
 */

/**
 * Add unit to numeric values.
 */

// We should not do anything if required serverside.

// Order matters. We need to check Webkit the last one because

// other vendors use to add Webkit prefixes to some properties

// Correctly detect the Edge browser.

// Correctly detect the Safari browser.

/**
 * Vendor prefix string for the current browser.
 *
 * @type {{js: String, css: String, vendor: String, browser: String}}
 * @api public
 */

/**
 * Test if a keyframe at-rule should be prefixed or not
 *
 * @param {String} vendor prefix string for the current browser.
 * @return {String}
 * @api public
 */

// https://caniuse.com/#search=appearance

// https://caniuse.com/#search=color-adjust

/**
 * Replaces the letter with the capital letter
 *
 * @param {String} match
 * @param {String} c
 * @return {String}
 * @api private
 */

/**
 * Convert dash separated strings to camel-cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

/**
 * Convert dash separated strings to pascal cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

// but we can use a longhand property instead.

// https://caniuse.com/#search=mask

// Return custom CSS variable without prefixing.

// Return already prefixed value without prefixing.

// Try webkit fallback.

// https://caniuse.com/#search=text-orientation

// We test every property on vendor prefix requirement.

// Once tested, result is cached. It gives us up to 70% perf boost.

// http://jsperf.com/element-style-object-access-vs-plain-object

// Prefill cache with known css properties to reduce amount of

// properties we need to feature test at runtime.

// http://davidwalsh.name/vendor-prefix

// eslint-disable-next-line no-restricted-globals

// Properties that cannot be correctly detected using the

// cache prefill method.

/**
 * Test if a property is supported, returns supported property with vendor
 * prefix if required. Returns `false` if not supported.
 *
 * @param {String} prop dash separated
 * @param {Object} [options]
 * @return {String|Boolean}
 * @api public
 */

// For server-side rendering.

// Remove cache for benchmark tests or return property from the cache.

// Check if 'transition' or 'transform' natively supported in browser.

// Find a plugin for current prefix property.

// Reset styles for current property.

// Firefox can even throw an error for invalid properties, e.g., "0".

/**
 * Returns prefixed value transition/transform if needed.
 *
 * @param {String} match
 * @param {String} p1
 * @param {String} p2
 * @return {String}
 * @api private
 */

/**
 * Returns prefixed value if needed. Returns `false` if value is not supported.
 *
 * @param {String} property
 * @param {String} value
 * @return {String|Boolean}
 * @api public
 */

// It is a string or a number as a string like '1'.

// We want only prefixable values here.

// Create cache key for current value.

// Remove cache for benchmark tests or return value from cache.

// IE can even throw an error in some cases, for e.g. style.content = 'bar'.

// Test value as it is.

// Return false if value not supported.

// If 'transition' or 'transition-property' property.

// Value with a vendor prefix.

// Hardcode test to convert "flex" to "-ms-flexbox" for IE10.

// Test prefixed value.

// Write current value to cache.

// CONCATENATED MODULE: ./node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.esm.js

/**
 * Add vendor prefix to a property name when needed.
 *
 * @api public
 */

// Keyframes is already prefixed. e.g. key = '@-webkit-keyframes a'

// No need to prefix IE/Edge. Older browsers will ignore unsupported rules.

// https://caniuse.com/#search=keyframes

// CONCATENATED MODULE: ./node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.esm.js

/**
 * Sort props by length.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/jssPreset/jssPreset.js

// Subset of jss-preset-default with only the plugins the Material-UI components are using.

// Disable the vendor prefixer server-side, it does nothing.

// This way, we can get a performance boost.

// In the documentation, we are using `autoprefixer` to solve this problem.

// Returns a function which generates unique class names based on counters.

// When new generator function is created, rule counter is reset.

// We need to reset the rule counter for SSR for each request.

// It's inspired by

// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js

// Is a global static MUI style?

// We can use a shorthand class name, we never use the keys to style the components.

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/StylesProvider/StylesProvider.js

// Default JSS instance.

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/makeStyles/indexCounter.js

/* eslint-disable import/prefer-default-export */

// Global index counter to preserve source order.

// We create the style sheet during at the creation of the component,

// children are handled after the parents, so the order of style elements would be parent->child.

// It is a problem though when a parent passes a className

// which needs to override any child's styles.

// StyleSheet of the child has a higher specificity, because of the source order.

// So our solution is to render sheets them in the reverse order child->sheet, so

// that parent has a higher specificity.

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js

// EXTERNAL MODULE: ./node_modules/@material-ui/utils/esm/deepmerge.js

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/getStylesCreator/getStylesCreator.js

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/getStylesCreator/noopTheme.js

// We use the same empty object to ref count the styles that don't need a theme object.

/**
 * Extracts a styles object with only props that contain function values.
 */

// "the first render", or "memo dropped the value"

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/makeStyles/makeStyles.js

// Cache for the finalized classes value.

// Cache for the last used classes prop pointer.

// Cache for the last used rendered classes pointer.

// Tracks if either the rendered classes or classes prop has changed,

// requiring the generation of a new finalized classes object.
